%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: d_210_13.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For:  
%%CreationDate: 10/2/2019
%%BoundingBox: 0 0 1461 1011
%%HiResBoundingBox: 0 0 1461 1011
%%CropBox: 0 0 1461 1011
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.3 x585 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 9993 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD2FFFA8A8A8FD05FFA8FD05FFA8FD05FFA8
%A8A8FFFFFFFD07A8FFFD07A8FFFFA97DA8FD50FFA827272752277DFFFFFF
%27FD05FF27A8FFFF7DFD0527A8FF525252F8525252A85227522752527DFF
%7D27522727A8FD4EFF277DFFFFFFA8277DFFFF27FD05FF27A8FFA827A8FF
%FFFF7D27FD04FF27A8FFFFFF527DFD06FF27A8FFFF7D7DFD4DFF5252FD05
%FFA800FFFF27FD05FF27A8FF277DFD05FF5252FFFFFF00A8FFFFFF527DFD
%06FF527DFD38FFBCC2BCC3BCC2BCC3BCC2BCC3BCC2BCC3BCC2BCC3BCC2BC
%C3BC4B76C3BCC2BCC3BC279AC327C2BCC3BCC2279A9A27BCC3BCC2BCC39A
%4BBCC3BC279AC3BCC24B769A9A9AC3BCC276274B9ABCC3BCC2BCC3BCC2BC
%C3BCC2BCC3BCC2BCC3BCC2BCC3BCC2BCC3BCC2BCC3BCC2BCC3BCC2BCC3BC
%C2FD0EFFBBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BB27
%9393BBB5BB93BB27939327B5BB93BBB5276F9927BB93BBB5BB939927BB93
%BB279393BBB54B264B274B6FBBB5BB936F27276FBBB5BB93BBB5BB93BBB5
%BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5FD0E
%FFBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBB4B6FBCBB
%BC6F9ABB2793BC27BCB5BCBBBC279ABB2793BCBBBCB5BC6F4BB5BCBB2793
%BCBBBC4B76BBBCB5C2BCBCBCCACAC36F76C3CAC2BCBCC3B5FD04BCCACAC2
%B5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCFD0EFFBCB5BB
%B5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BC6F2793BCB599274B
%27BBB54B6FBBB5BC9327B5BC4B4BB5BCB5BB93276FBBB5BC2793B5BCB54B
%4BBCB5BBBCC99ACABCBCC29AA8C3BBCAC3C2FFC2B5C9BCCABCC2C3BBB5BC
%B5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5FD0EFFB5BCBBBCB5BC
%BBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BC4B274B9A6F4B2775BBBC
%4B276F996F274BBCB5BC274B6F9A6F274BBCBBBCB52793BCB5BC4B6F939A
%93A0A1CA524B939A7D7CB5BCBBFFBCCACABCC3C3C3CABCBCBBBCB5BCBBBC
%B5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCFD0EFFBB93BBB5BB93BBB5BB
%93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BB6F4B264B4B934BBBB5BB6F4B
%274B4BBBB5BB93BB4B4B274B6FBB93BBB5BB4BBBB5BB936F274B274B52A1
%A1BC4B4B27A19ABB93BBCAC2A1BCCAC39ABBBCCAA1BBB5BB93BBB5BB93BB
%B5BB93BBB5BB93BBB5BB93BBB5BB93FD0EFFB5BCBBBCB5BCBBBCB5BCBBBC
%B5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BC
%BBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBC3C3C3CABC
%B5C2BCFFBBBCC3CABCCABBC3FFC3CABCBBFFBBBCB5BCBBBCB5BCBBBCB5BC
%BBBCB5BCBBBCB5BCBBBCB5BCFD0EFFBBB5BCB5BBB5BCB5BBB5BCB5BBB5BC
%B5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BB
%B5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCB5BBB5BCBCC3B5C3CACAC2BC
%BCCACACABBBCBCBCB5C9BCC3CACABCBCB5BBB5BCB5BBB5BCB5BBB5BCB5BB
%B5BCB5BBB5BCB5BBB5FD0EFFBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBC
%B5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BC
%BBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBC
%B5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BCBBBCB5BC
%BBBCB5BCBBBCFD0EFFBBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BB
%B5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB
%93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BB
%B5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB93BBB5BB
%93BBB5FD0EFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%FDFCFFFDFCFFFDFCFFFDFCFFFD20FFA8A8FFFFFFA8FD17FFA8A8A8FFFD05
%A8FD17FF7DA8FFA87DFD27FFA8FD04FFA8FD10FFA827277DFF272752FD08
%FFA852527D525252FD06FF7D272727A87D272727A8FD07FF52A8FFA852A8
%FD09FF7D27A8FF27A8FD08FF527DFFFFA852A8FD09FF7DA8FFA87DFD09FF
%A8277DFFFF7D52FD10FF522727277D2727277DFD07FF272727A8F8277DFD
%06FF7D2727F8A87D27F827A8FD06FF7D2752FF522752FD08FFA82752FF27
%52FD08FF2727F87D7D27F827A8FD07FF7D2752FF2727A8FD07FFA82727FF
%FF7D27A8FD10FFA8272727A82727277DFD07FF2727A87D2752FD07FF7D27
%2727A87D272727A8FD06FF7D2752FF52277DFD08FF7D27FF7D52A8FD07FF
%A8FD04277D2727277DFD07FF7D27A8FF2727FD07FFA85227A8FF522752FD
%13FF5227A8FF7D277DFD06FFA80052FF5200A8FD07FFA87D5300A8A87D28
%27A8FD06FF7D27A8FF7D27FD09FF2852FF5227FD0AFFA82727FFFF522752
%FD07FF2727A8A82752FD07FFA80027A8FF272752FD13FF7D27FFFFFF27A8
%FD06FF7D27A8FF277DFD0BFF52A8FFFFFF27A8FD06FF7D52FFFF7D52FD09
%FFA827A8A82752FD0AFF5252FFFFA927A8FD06FFA82727FF522752FD08FF
%A82752FFA92727A8FD10FFA87D27A8FFA8277DFD07FF527DFF7D27A8FD0B
%FF7DA8FFFFFF527DFD06FF7D52FFFF7D7DFD0AFF7D27FF7D277DFD08FF7D
%52FFFFFF277DFD07FF7DF852FF52F87DFD09FF7DF8A8FFA8277DFD10FFA8
%7DFFFFFF7DA8FD08FFA8FFFFFFA8FD0DFFA8FFFFFFA8FD07FFA8FFFFFFA8
%FD0CFF52A8FF527DFD27FFA8A8FFFFFF7DFDFCFFFDFCFFFDFCFFFD2EFF7D
%FFFFFF7DA8FD17FFA8A8FFFFFFA8FD06FFFD04A8FFA8A87DFD0AFF7DA8FF
%A8A8FD30FFA87DFF7DA8FD0AFF7D52FFFF7D27A8FD07FF277DFFFF527DFD
%09FFA827A8FFFF527DFD06FF52272752FF2727277DFD07FFA8527DFF7D27
%A8FD07FFA8A8A8FFFD04A8FD07FF7D52A8FFFF527DFD12FFA80027A82700
%FD09FF7D277DFF7D2752FD07FF522727A87D27277DFD07FFA80027A8A827
%277DFD06FF52272728FF2727007DFD06FFA82727FF7D277DFD08FF270027
%5252002727A8FD05FFA8272700A827270052FD12FF2727FF2727FD08FF7D
%2727FF522727A8FD08FF5227FFFF7D27A8FD07FF272727FF522727FD07FF
%52272752FF2727277DFD06FF7D27A8FF5227FD09FF2727275252272727A8
%FD05FF7D27272752FD0427FD12FF2752FF2727FD07FFA827F8527D27F852
%FD09FF7D52FFFFA827FD08FF2727FFFF52277DFD07FF52F82752FFF82727
%7DFD06FF7D277DFF2752FD09FFFD0427522727F8A8FD05FFA8F827277DFD
%0427FD12FF2752FF277DFD08FF7D2727FF522727FD09FF52A8FFFF7D7DFD
%08FF272752FF522727FD07FF7D27277DFF522727A8FD06FFA827A8FF5227
%FD0AFFA8277DFFFF2727A8FD07FF5227A8FF7D277DFD11FFA827A8A8277D
%FD09FF52277DFF522752FD08FF27A8FFFF52A8FD08FF7D2727A8A827277D
%FD06FFA8277DFFFF7D277DFD07FFA82728FF7D277DFD07FFA8A82727A8A8
%522752FD08FF527DFFFFA827FD12FFA87DFFFF7DFD0BFF5252FFFF5227FD
%07FFA852FFFFFF27FD0AFFA827A8FFFF277DFD06FF7D7DFFFFFF527DFD09
%FF7D277DFF5227FD08FF7DA8A8FF7D7DA8FD08FFA952FFFFFF52FD24FF7D
%FFFFFF7DA8FD06FFA8FFFFFFA8FD0CFFA8A8FFFFA87DFD06FFA8FD04FFA8
%FD0BFFA87DA8FFA87DFDFCFFFDFCFFFDF5FFA8FFFFA8FD40FFA8A8FFFF7D
%FD07FFA87DA8FFFFA87DA8FD09FFA952FFFFA952FD18FFA87DFFFF7DFD08
%FFA8FD04FFA9FD18FF525252FF525252FD12FFA852FFFF7D52FD06FF7D27
%27277DA82727F8A8FD07FFA82752FFA8277DFD07FFCA93CAFFCA93C3FD09
%FF7D27FFFF5252FD07FF272752FFA827277DFD08FF277DFFFF5252FD08FF
%522727A87D2727A8FD11FFA8527DFF7D27A8FD06FF7D2727277D7D272727
%52FD07FF2727A8FF2727A8FD07FFB5BCBBCFBCBCBBC9FD07FFA8277DFF7D
%27FD07FFA82727277D7D272727A8FD06FF522727A87D27277DFD07FF2727
%FFFF2727FD12FF7D2727FF7D2728FD07FFA827272728A827270052FD06FF
%27277DFF27277DFD08FFC3B5BCCACAB5BCC3FD06FFA82727A87D2752FD08
%FF27272752A82727277DFD06FF7D0027A8A800277DFD06FF7D27FFFF7D27
%A8FD12FFA82727FF7D2752FD08FF7D7D277DFFA852277DFD06FF5227A8FF
%5227A8FD09FFBCB5FFFFC2B5CFFD06FFA82827FF522752FD09FF272752FF
%A82727A8FD06FFA82727FFFF2727FD07FF7D52FFFF7D28A8FD13FFA8277D
%FFA827A8FD08FF7D27A8FFFFA827FD07FFA827F8A8A827F8A8FD08FFB5C3
%FFFFBCBCFD08FF7D277DFF5227A8FD08FF52F8A8FFFFF852A8FD06FF7D27
%7DFFA82752FD08FFF852A8FF2727A8FD14FF27FFFFA852FD08FF52A8FFFF
%FF52A8FD08FFA85252FFA8527DFD07FFCABCCAFFFFBCCAFD09FF7D52FFFF
%527DFD07FFA827A8FFFF7D52A8FD07FF7D27A8FFA8277DFD08FF7D2752A8
%7D2727A8FD13FFA87DFFFF7DA8FD06FFA8A8FFFFFFA8A8FD0AFFA852FFFF
%A852FD08FFCFFFFFFFCAFD0BFF7DA8FFFF52FD07FFA8FD1DFFA8525252A8
%525252FD31FFA8FFFFFFA8FD19FFA8FFFFFFA8FDFCFFFDFCFFFDD6FFA8FF
%FFA8FD19FFA8A8FFFFA8A8FD07FFA87DFFFFFF7DA8FD0AFF7DFFFFFF7DFD
%30FFA8FFFFFFA8FD09FFA85227FF7D277DFD07FF525228A87D52287DFD08
%FF7D2752FF52277DFD06FFA800277DFF522727A8FD08FF2727A8A82752FD
%08FF2753FFFFA8277DFD09FF52A8525252FD12FF2728A8FF7D2752FD08FF
%5227A87D2752FD08FF272727A87D272752FD07FFA82752FF7D2752FD07FF
%27272728A827272752FD07FF52277DA82727FD08FF2727277DA82827277D
%FD07FFA827A852277DFD11FF5227F87DA827F827FD07FF7D2752FF2727FD
%09FFF82727A852272752FD06FFA82727FFA82727FD08FF522727F8FF2727
%F852FD06FF272752FFF8277DFD07FF7D27F8277D7DF827277DFD07FF7DF8
%A852277DFD12FF272752FF7D2727FD07FF7D27A8FF2752FD09FF525227A8
%A8522752FD06FFA8277DFF7D277DFD09FFA82727FFFF7D5227FD06FF5227
%FFFF2727FD09FF5227277DFF7D27277DFD07FF5227A85227FD13FF7D2752
%FFFF2827A8FD06FFA82752FF5227A8FD09FF7D27FFFFFF27A8FD06FFA852
%00A8A82727A8FD09FFA800FFFFFF7D52FD06FF522752FF27277DFD09FF52
%277DFFFF52277DFD07FF2700A85252FD13FF527DFFFFA827A8FD08FF5227
%7D7D2752FD08FF52277DFFA82752FD08FFA82727FFA82727FD09FFA852FF
%FFFF7D52FD07FF27277DA92728A8FD08FF7D277DFFFF52277DFD06FFA827
%27A8527DFD22FFA85227FF7D277DFD07FF52A8FFFF7D7DFD0AFF7D2752FF
%7D2752FD07FF5227A8FFA87D27FD09FF2727A8A82752FD07FFA8277DA8FF
%7D5252FD07FF7D7D7DFF7DFD28FFA8FD19FFA8A8FFFFA8A8FD07FFA8A8FF
%FFFF7DFD0BFF7DFFFFFFA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDB9FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 13 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">клипарты_02</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-10-02T16:50:54+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2019-10-02T16:50:55+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2019-10-02T16:50:55+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>224</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A7hr/AJq8z2fnW00i0ti1nM0TJWIsssbECU+qD8JQ+23U9hm20+mwywGcj6t+&#xA;vLu2b4CHCb5qNj5s83XHnS70xbRjYRGdGjeMq8QSNmgl9SgUrK6cRWuSyaXAMIlfq26/MV5MTAAD&#xA;dG+RvM2uapfXlrqEfqRQqH+tBDEEkJAMBWlK0NdzyHfKtdpsUIgwPwu/iuSIHJlc13CkywGUJKwB&#xA;AIr9o0Wp6Cp2HjmpOSINE7sBE1aTXt7O3K5h1tba3Uqnpm3R6sSRWrEE1KnpmHlyEniGThj/AFW6&#xA;EehjZ96K0x7tLsx3OprehkUKiwrGocgvUMpbdk34/TlmEyEqlPi+FfjZjOq2FfF8O/mH9Vf8xvNi&#xA;Thk/3MX9J1OyVu2FWShLDr0IO/tQ9Hi+ke5wzzSuyXQTLYyzlirOyTwn4ajpG1akbEfHuO3TdhLd&#xA;UPexaQZrlIZDGsZDIwViAS3FowGNSqjcMaHqKHY4VfZ/5DtKPyY8vNFT1BbzFeQLCouJey7n6M1G&#xA;pviNc22FdWeGW6CWwPEu5AmPB6AUqSAK08PiP6qGj1UOXmz2dFNcm9njdKW6KpicKakkfECa0PtT&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:be98135e-5ae9-0349-a5cc-43dc699fe594</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:be98135e-5ae9-0349-a5cc-43dc699fe594</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:5f3645d4-fb45-2d45-aad3-7da062592d46</stRef:instanceID>
            <stRef:documentID>xmp.did:5f3645d4-fb45-2d45-aad3-7da062592d46</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:15ff752f-8b86-0d4c-a7ef-03d6258361e5</stEvt:instanceID>
                  <stEvt:when>2019-09-17T16:42:21+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:be98135e-5ae9-0349-a5cc-43dc699fe594</stEvt:instanceID>
                  <stEvt:when>2019-10-02T16:50:55+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1010.710854</stDim:w>
            <stDim:h>1087.506969</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1011 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1011 li
1461 1011 li
1461 0 li
cp
clp
1461 1011 mo
7.62939e-06 1011 li
7.62939e-06 0 li
1461 0 li
1461 1011 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
477.194 755.25 mo
431.698 707.624 li
476.945 660.313 li
477.229 661.127 li
480.761 671.252 478.133 682.505 470.481 690.018 cv
452.548 707.624 li
470.912 726.231 li
478.451 733.87 480.899 745.177 477.194 755.25 cv
cp
.160784 .160784 .168627 rgb
f
522.49 755.25 mo
476.994 707.624 li
522.241 660.313 li
522.525 661.127 li
526.058 671.252 523.429 682.505 515.777 690.018 cv
497.845 707.624 li
516.208 726.231 li
523.747 733.87 526.195 745.177 522.49 755.25 cv
cp
f
940.881 885.879 mo
940.881 859.13 li
975.11 827.704 li
982.923 833.192 li
956.029 872.511 li
982.908 911.741 li
975.109 917.2 li
940.881 885.879 li
cp
f
983.186 885.879 mo
983.186 859.13 li
1017.41 827.704 li
1025.23 833.192 li
998.334 872.511 li
1025.21 911.741 li
1017.41 917.2 li
983.186 885.879 li
cp
f
639.778 560.137 mo
623.177 543.165 li
639.778 526.16 li
639.778 497.046 li
604.974 529 li
604.974 557.33 li
639.778 589.177 li
639.778 560.137 li
cp
f
688.401 560.137 mo
671.8 543.165 li
688.401 526.16 li
688.401 497.046 li
653.597 529 li
653.597 557.33 li
688.401 589.177 li
688.401 560.137 li
cp
f
648.891 913.746 mo
630.372 913.746 li
599.6 872.314 li
630.167 831.158 li
648.687 831.158 li
618.12 872.314 li
648.891 913.746 li
cp
f
693.776 913.746 mo
675.256 913.746 li
644.485 872.314 li
675.052 831.158 li
693.571 831.158 li
663.004 872.314 li
693.776 913.746 li
cp
f
815.755 658.701 mo
772.111 707.782 li
815.755 756.862 li
795.827 708.144 li
815.755 658.701 li
cp
f
856.513 658.701 mo
812.869 707.782 li
856.513 756.862 li
836.586 708.144 li
856.513 658.701 li
cp
f
326.967 879.165 mo
325.082 874.885 325.082 870.019 326.967 865.739 cv
330.76 857.128 339.348 845.101 346.039 837.533 cv
353.073 829.576 347.95 822.536 339.178 829.299 cv
326.835 840.563 308.098 854.08 308.546 872.452 cv
308.098 890.823 326.835 904.341 339.178 915.604 cv
347.95 922.368 353.073 915.328 346.039 907.371 cv
339.348 899.803 330.76 887.775 326.967 879.165 cv
cp
f
287.499 879.165 mo
285.614 874.885 285.614 870.019 287.499 865.739 cv
291.291 857.128 299.88 845.101 306.571 837.533 cv
313.605 829.576 308.482 822.536 299.709 829.299 cv
287.366 840.563 268.63 854.08 269.077 872.452 cv
268.63 890.823 287.366 904.341 299.709 915.604 cv
308.482 922.368 313.605 915.328 306.571 907.371 cv
299.88 899.803 291.291 887.775 287.499 879.165 cv
cp
f
129.374 851.817 mo
129.194 851.535 129.012 851.256 128.817 850.984 cv
128.695 850.802 li
128.623 850.706 128.545 850.622 128.471 850.532 cv
125.113 846.163 119.789 843.326 113.776 843.326 cv
103.612 843.326 95.3729 851.395 95.3729 861.349 cv
95.3729 871.302 103.612 879.372 113.776 879.372 cv
116.667 879.372 119.391 878.7 121.825 877.537 cv
121.034 882.435 119.002 886.732 115.305 888.718 cv
115.028 888.47 114.73 888.237 114.403 888.023 cv
113.363 887.341 111.917 886.998 110.69 887.002 cv
109.083 887.009 107.624 887.575 106.372 888.542 cv
105.642 889.106 105.054 889.826 104.603 890.622 cv
104 891.551 103.529 893.125 103.586 894.276 cv
103.89 900.436 109.808 901.543 112.559 901.577 cv
122.797 901.701 129.619 893.963 132.639 884.175 cv
135.448 875.068 134.862 860.241 129.374 851.817 cv
cp
f
180.636 851.817 mo
180.456 851.535 180.273 851.256 180.078 850.984 cv
179.956 850.802 li
179.884 850.706 179.807 850.622 179.732 850.532 cv
176.374 846.163 171.051 843.326 165.037 843.326 cv
154.874 843.326 146.634 851.395 146.634 861.349 cv
146.634 871.302 154.874 879.372 165.037 879.372 cv
167.928 879.372 170.652 878.7 173.086 877.537 cv
172.296 882.435 170.264 886.732 166.566 888.718 cv
166.29 888.47 165.992 888.237 165.664 888.023 cv
164.625 887.341 163.178 886.998 161.952 887.002 cv
160.344 887.009 158.885 887.575 157.633 888.542 cv
156.903 889.106 156.315 889.826 155.864 890.622 cv
155.262 891.551 154.79 893.125 154.847 894.276 cv
155.151 900.436 161.069 901.543 163.821 901.577 cv
174.058 901.701 180.88 893.963 183.9 884.175 cv
186.709 875.068 186.123 860.241 180.636 851.817 cv
cp
f
436.502 837.008 mo
436.502 873.771 li
457.838 873.771 li
457.55 877.972 456.363 885.053 451.842 889.917 cv
448.293 893.736 443.275 895.593 436.502 895.593 cv
436.502 907.896 li
446.739 907.896 454.933 904.665 460.854 898.292 cv
468.173 890.416 470.301 879.713 470.623 873.771 cv
470.627 837.008 li
436.502 837.008 li
cp
f
485.264 837.008 mo
485.264 873.771 li
506.601 873.771 li
506.312 877.972 505.125 885.053 500.605 889.917 cv
497.056 893.736 492.038 895.593 485.264 895.593 cv
485.264 907.896 li
495.501 907.896 503.695 904.665 509.617 898.292 cv
516.936 890.416 519.064 879.713 519.385 873.771 cv
519.39 837.008 li
485.264 837.008 li
cp
f
273.925 411.453 mo
313.463 345.428 li
281.73 345.428 li
265.021 411.453 li
273.925 411.453 li
cp
f
313.847 411.453 mo
353.385 345.428 li
321.652 345.428 li
304.944 411.453 li
313.847 411.453 li
cp
f
617.545 413.373 mo
636.589 360.455 li
639.557 352.206 633.445 343.509 624.678 343.509 cv
617.616 343.509 611.919 349.288 612.02 356.349 cv
612.834 413.373 li
617.545 413.373 li
cp
f
661.555 413.373 mo
680.598 360.455 li
683.567 352.206 677.454 343.509 668.687 343.509 cv
661.625 343.509 655.929 349.288 656.03 356.349 cv
656.844 413.373 li
661.555 413.373 li
cp
f
96.5173 707.774 mo
96.5173 706.763 98.6243 704.984 100.193 703.945 cv
100.578 703.658 li
106.466 699.278 124.135 686.306 139.064 662.312 cv
141.51 663.522 li
141.51 663.522 129.636 699.061 120.574 707.782 cv
129.636 716.502 141.51 752.041 141.51 752.041 cv
139.064 753.251 li
124.135 729.257 106.466 716.286 100.578 711.905 cv
100.193 711.618 li
98.6243 710.579 96.5173 708.786 96.5173 707.774 cv
cp
f
139.412 707.774 mo
139.412 706.763 141.519 704.984 143.088 703.945 cv
143.473 703.658 li
149.361 699.278 167.029 686.306 181.958 662.312 cv
184.405 663.522 li
184.405 663.522 172.531 699.061 163.469 707.782 cv
172.531 716.502 184.405 752.041 184.405 752.041 cv
181.958 753.251 li
167.029 729.257 149.361 716.286 143.473 711.905 cv
143.088 711.618 li
141.519 710.579 139.412 708.786 139.412 707.774 cv
cp
f
302.949 697.003 mo
302.808 691.312 302.295 689.852 302.295 689.852 cv
301.165 678.678 291.847 669.187 280.378 669.187 cv
268.155 669.187 258.247 679.095 258.247 691.318 cv
258.247 703.541 268.155 713.45 280.378 713.45 cv
282.844 713.45 285.213 713.041 287.428 712.296 cv
286.164 733.686 268.947 745.336 268.947 745.336 cv
271.168 746.376 li
298.129 731.597 303.28 710.318 302.949 697.003 cv
cp
f
360.145 697.003 mo
360.004 691.312 359.491 689.852 359.491 689.852 cv
358.361 678.678 349.043 669.187 337.574 669.187 cv
325.351 669.187 315.443 679.095 315.443 691.318 cv
315.443 703.541 325.351 713.45 337.574 713.45 cv
340.04 713.45 342.409 713.041 344.624 712.296 cv
343.361 733.686 326.143 745.336 326.143 745.336 cv
328.364 746.376 li
355.325 731.597 360.476 710.318 360.145 697.003 cv
cp
f
945.1 742.34 mo
944.319 742.64 943.429 742.386 942.913 741.727 cv
942.184 740.795 942.461 739.432 943.499 738.867 cv
945.496 737.782 948.985 735.681 952.403 732.92 cv
959.26 727.382 961.214 718.778 951.649 715.132 cv
941.168 711.135 934.344 703.266 934.344 694.019 cv
934.344 682.465 944.829 673.099 956.384 673.099 cv
967.225 673.099 976.31 682.049 977.368 692.611 cv
977.378 692.612 977.874 694.013 978.008 699.393 cv
978.316 711.795 974.352 731.126 945.1 742.34 cv
cp
f
998.841 742.34 mo
998.06 742.64 997.17 742.386 996.654 741.727 cv
995.925 740.795 996.202 739.432 997.241 738.867 cv
999.237 737.782 1002.73 735.681 1006.14 732.92 cv
1013 727.382 1014.96 718.778 1005.39 715.132 cv
994.909 711.135 988.085 703.266 988.085 694.019 cv
988.085 682.465 998.571 673.099 1010.12 673.099 cv
1020.97 673.099 1030.05 682.049 1031.11 692.611 cv
1031.12 692.612 1031.62 694.013 1031.75 699.393 cv
1032.06 711.795 1028.09 731.126 998.841 742.34 cv
cp
f
808.64 855.733 mo
806.953 844.063 801.277 828.712 783.581 828.712 cv
772.197 828.712 763.905 838.926 763.958 849.955 cv
764.021 862.823 773.455 869.121 786.328 871.18 cv
787.128 871.309 788.001 871.436 788.908 871.56 cv
795.598 872.477 800.573 878.215 800.573 884.968 cv
800.573 897.056 791.559 907.077 779.9 908.663 cv
778.059 908.914 776.659 910.434 776.659 912.292 cv
776.659 912.459 li
776.659 914.691 778.612 916.453 780.824 916.159 cv
796.213 914.116 806.637 902.817 808.64 884.968 cv
808.64 884.968 810.326 867.404 808.64 855.733 cv
cp
f
863.916 855.733 mo
862.23 844.063 856.554 828.712 838.858 828.712 cv
827.473 828.712 819.181 838.926 819.235 849.955 cv
819.298 862.823 828.732 869.121 841.604 871.18 cv
842.405 871.309 843.278 871.436 844.185 871.56 cv
850.875 872.477 855.85 878.215 855.85 884.968 cv
855.85 897.056 846.836 907.077 835.177 908.663 cv
833.336 908.914 831.936 910.434 831.936 912.292 cv
831.936 912.459 li
831.936 914.691 833.889 916.453 836.101 916.159 cv
851.489 914.116 861.914 902.817 863.916 884.968 cv
863.916 884.968 865.603 867.404 863.916 855.733 cv
cp
f
769.528 500.598 mo
769.528 552.804 li
783.059 559.81 li
772.023 570.846 li
772.023 585.625 li
804.843 552.804 li
804.843 500.598 li
769.528 500.598 li
cp
f
823.781 500.598 mo
823.781 552.804 li
837.312 559.81 li
826.276 570.846 li
826.276 585.625 li
859.096 552.804 li
859.096 500.598 li
823.781 500.598 li
cp
f
469.541 516.381 mo
468.952 507.948 461.697 501.353 453.002 501.868 cv
445.126 502.335 438.696 508.852 438.329 516.734 cv
437.911 525.714 445.067 533.125 453.954 533.125 cv
454.922 533.125 455.866 533.024 456.786 532.856 cv
442.483 582.87 li
447.546 584.382 li
467.051 531.02 li
468.736 526.313 469.597 521.351 469.597 516.352 cv
469.541 516.381 li
cp
f
517.524 516.381 mo
516.935 507.948 509.681 501.353 500.985 501.868 cv
493.109 502.335 486.679 508.852 486.312 516.734 cv
485.894 525.714 493.05 533.125 501.937 533.125 cv
502.906 533.125 503.849 533.024 504.769 532.856 cv
490.466 582.87 li
495.53 584.382 li
515.035 531.02 li
516.719 526.313 517.58 521.351 517.58 516.352 cv
517.524 516.381 li
cp
f
430.538 340.078 mo
430.538 382.059 li
454.07 382.059 li
470.766 416.804 li
470.766 382.059 li
470.766 340.078 li
430.538 340.078 li
cp
f
485.125 340.078 mo
485.125 382.059 li
508.657 382.059 li
525.353 416.804 li
525.353 382.059 li
525.353 340.078 li
485.125 340.078 li
cp
f
639.515 687.765 mo
638.708 678.852 631.751 671.469 622.432 671.469 cv
613.455 671.469 604.856 679.362 605.271 688.63 cv
605.516 694.089 608.079 699.044 612.099 702.207 cv
616.129 705.378 619.009 709.827 619.646 714.915 cv
620.324 720.329 619.746 727.257 615.113 734.061 cv
609.209 742.733 613.437 746.308 619.777 742.699 cv
624.646 739.927 633.319 728.118 636.64 716.493 cv
640.01 704.697 640.019 690.131 639.515 687.765 cv
cp
1 .345098 .247059 rgb
f
687.879 687.765 mo
687.072 678.852 680.115 671.469 670.796 671.469 cv
661.819 671.469 653.22 679.362 653.635 688.63 cv
653.879 694.089 656.442 699.044 660.463 702.207 cv
664.493 705.378 667.373 709.827 668.01 714.915 cv
668.688 720.329 668.11 727.257 663.477 734.061 cv
657.572 742.733 661.801 746.308 668.141 742.699 cv
673.01 739.927 681.683 728.118 685.004 716.493 cv
688.374 704.697 688.383 690.131 687.879 687.765 cv
cp
f
1379.84 229.893 mo
81.1567 229.893 li
81.1567 118.984 li
1379.84 118.984 li
1379.84 229.893 li
cp
f
456.946 177.12 mo
429.086 149.389 li
428.054 148.357 427.539 147.197 427.539 145.907 cv
427.539 144.617 428.054 143.456 429.086 142.424 cv
430.031 141.479 431.15 141.006 432.44 141.006 cv
433.729 141.006 434.89 141.479 435.922 142.424 cv
463.911 170.284 li
464.856 171.316 465.329 172.457 465.329 173.702 cv
465.329 174.949 464.856 176.088 463.911 177.12 cv
462.879 178.151 461.718 178.667 460.428 178.667 cv
459.139 178.667 457.977 178.151 456.946 177.12 cv
cp
419.026 170.413 mo
424.959 170.413 430.46 169.361 435.535 167.253 cv
440.608 165.147 445.015 162.181 448.755 158.353 cv
452.496 154.528 455.398 150.057 457.461 144.939 cv
459.525 139.825 460.557 134.256 460.557 128.237 cv
460.557 122.304 459.525 116.78 457.461 111.663 cv
455.398 106.548 452.496 102.076 448.755 98.249 cv
445.015 94.4243 440.608 91.4575 435.535 89.3496 cv
430.46 87.2437 424.959 86.1895 419.026 86.1895 cv
413.006 86.1895 407.46 87.2437 402.388 89.3496 cv
397.313 91.4575 392.907 94.4243 389.167 98.249 cv
385.426 102.076 382.525 106.548 380.461 111.663 cv
378.398 116.78 377.365 122.304 377.365 128.237 cv
377.365 134.256 378.398 139.825 380.461 144.939 cv
382.525 150.057 385.426 154.528 389.167 158.353 cv
392.907 162.181 397.313 165.147 402.388 167.253 cv
407.46 169.361 413.006 170.413 419.026 170.413 cv
cp
419.026 179.957 mo
411.545 179.957 404.665 178.667 398.389 176.088 cv
392.112 173.508 386.673 169.897 382.074 165.254 cv
377.473 160.611 373.903 155.151 371.368 148.874 cv
368.831 142.598 367.563 135.717 367.563 128.237 cv
367.563 120.843 368.831 114.007 371.368 107.729 cv
373.903 101.453 377.473 95.9922 382.074 91.3486 cv
386.673 86.7056 392.112 83.0942 398.389 80.5146 cv
404.665 77.9346 411.545 76.645 419.026 76.645 cv
426.42 76.645 433.256 77.9346 439.534 80.5146 cv
445.809 83.0942 451.271 86.7056 455.914 91.3486 cv
460.557 95.9922 464.146 101.453 466.684 107.729 cv
469.219 114.007 470.489 120.843 470.489 128.237 cv
470.489 135.717 469.219 142.598 466.684 148.874 cv
464.146 155.151 460.557 160.611 455.914 165.254 cv
451.271 169.897 445.809 173.508 439.534 176.088 cv
433.256 178.667 426.42 179.957 419.026 179.957 cv
cp
.160784 .160784 .168627 rgb
f
531.365 180.731 mo
523.54 180.731 516.597 179.226 510.535 176.217 cv
504.473 173.208 499.744 169.039 496.347 163.706 cv
492.949 158.375 491.253 152.271 491.253 145.391 cv
491.253 82.9648 li
491.253 81.5044 491.724 80.3008 492.672 79.3535 cv
493.617 78.4087 494.82 77.9346 496.283 77.9346 cv
497.744 77.9346 498.947 78.4087 499.894 79.3535 cv
500.84 80.3008 501.314 81.5044 501.314 82.9648 cv
501.314 145.391 li
501.314 150.465 502.581 154.935 505.118 158.805 cv
507.653 162.674 511.2 165.705 515.759 167.898 cv
520.316 170.09 525.517 171.187 531.365 171.187 cv
537.125 171.187 542.242 170.09 546.714 167.898 cv
551.184 165.705 554.688 162.674 557.226 158.805 cv
559.761 154.935 561.031 150.465 561.031 145.391 cv
561.031 82.9648 li
561.031 81.5044 561.503 80.3008 562.45 79.3535 cv
563.395 78.4087 564.597 77.9346 566.061 77.9346 cv
567.608 77.9346 568.834 78.4087 569.737 79.3535 cv
570.64 80.3008 571.091 81.5044 571.091 82.9648 cv
571.091 145.391 li
571.091 152.271 569.392 158.375 565.997 163.706 cv
562.599 169.039 557.913 173.208 551.937 176.217 cv
545.961 179.226 539.104 180.731 531.365 180.731 cv
cp
f
643.447 170.413 mo
649.379 170.413 654.881 169.361 659.956 167.253 cv
665.029 165.147 669.436 162.181 673.176 158.353 cv
676.917 154.528 679.819 150.057 681.882 144.939 cv
683.946 139.825 684.978 134.256 684.978 128.237 cv
684.978 122.304 683.946 116.78 681.882 111.663 cv
679.819 106.548 676.917 102.076 673.176 98.249 cv
669.436 94.4243 665.029 91.4575 659.956 89.3496 cv
654.881 87.2437 649.379 86.1895 643.447 86.1895 cv
637.427 86.1895 631.881 87.2437 626.809 89.3496 cv
621.734 91.4575 617.328 94.4243 613.588 98.249 cv
609.847 102.076 606.946 106.548 604.882 111.663 cv
602.818 116.78 601.786 122.304 601.786 128.237 cv
601.786 134.256 602.818 139.825 604.882 144.939 cv
606.946 150.057 609.847 154.528 613.588 158.353 cv
617.328 162.181 621.734 165.147 626.809 167.253 cv
631.881 169.361 637.427 170.413 643.447 170.413 cv
cp
643.447 179.957 mo
635.966 179.957 629.086 178.667 622.81 176.088 cv
616.533 173.508 611.093 169.897 606.494 165.254 cv
601.893 160.611 598.324 155.151 595.789 148.874 cv
593.252 142.598 591.984 135.717 591.984 128.237 cv
591.984 120.843 593.252 114.007 595.789 107.729 cv
598.324 101.453 601.893 95.9922 606.494 91.3486 cv
611.093 86.7056 616.533 83.0942 622.81 80.5146 cv
629.086 77.9346 635.966 76.645 643.447 76.645 cv
650.841 76.645 657.677 77.9346 663.954 80.5146 cv
670.23 83.0942 675.691 86.7056 680.335 91.3486 cv
684.978 95.9922 688.567 101.453 691.105 107.729 cv
693.639 114.007 694.91 120.843 694.91 128.237 cv
694.91 135.717 693.639 142.598 691.105 148.874 cv
688.567 155.151 684.978 160.611 680.335 165.254 cv
675.691 169.897 670.23 173.508 663.954 176.088 cv
657.677 178.667 650.841 179.957 643.447 179.957 cv
cp
f
737.213 178.667 mo
735.837 178.667 734.654 178.174 733.667 177.185 cv
732.677 176.197 732.183 175.014 732.183 173.637 cv
732.183 77.9346 li
742.244 77.9346 li
742.244 173.637 li
742.244 175.014 741.77 176.197 740.824 177.185 cv
739.877 178.174 738.674 178.667 737.213 178.667 cv
cp
701.615 87.0923 mo
700.239 87.0923 699.12 86.6631 698.262 85.8022 cv
697.401 84.9438 696.971 83.8682 696.971 82.5781 cv
696.971 81.2036 697.401 80.085 698.262 79.2246 cv
699.12 78.3662 700.239 77.9346 701.615 77.9346 cv
772.94 77.9346 li
774.315 77.9346 775.433 78.3662 776.294 79.2246 cv
777.152 80.085 777.583 81.2036 777.583 82.5781 cv
777.583 83.8682 777.152 84.9438 776.294 85.8022 cv
775.433 86.6631 774.315 87.0923 772.94 87.0923 cv
701.615 87.0923 li
cp
f
797.447 178.667 mo
795.984 178.667 794.781 178.196 793.836 177.249 cv
792.888 176.303 792.417 175.101 792.417 173.637 cv
792.417 82.9648 li
792.417 81.5044 792.888 80.3008 793.836 79.3535 cv
794.781 78.4087 795.984 77.9346 797.447 77.9346 cv
857.938 77.9346 li
859.313 77.9346 860.496 78.3862 861.485 79.2891 cv
862.472 80.1924 862.969 81.3755 862.969 82.8359 cv
862.969 84.126 862.472 85.2446 861.485 86.1895 cv
860.496 87.1372 859.313 87.6084 857.938 87.6084 cv
802.478 87.6084 li
802.478 123.207 li
842.848 123.207 li
844.309 123.207 845.512 123.68 846.46 124.625 cv
847.404 125.572 847.878 126.733 847.878 128.108 cv
847.878 129.484 847.404 130.645 846.46 131.59 cv
845.512 132.538 844.309 133.009 842.848 133.009 cv
802.478 133.009 li
802.478 168.994 li
857.938 168.994 li
859.313 168.994 860.496 169.468 861.485 170.413 cv
862.472 171.36 862.969 172.477 862.969 173.766 cv
862.969 175.229 862.472 176.411 861.485 177.313 cv
860.496 178.216 859.313 178.667 857.938 178.667 cv
797.447 178.667 li
cp
f
912.624 179.957 mo
907.12 179.957 902.026 179.162 897.34 177.571 cv
892.652 175.981 888.59 173.724 885.151 170.8 cv
881.711 167.878 879.09 164.48 877.284 160.611 cv
876.595 159.236 876.574 157.966 877.219 156.806 cv
877.864 155.645 878.961 154.851 880.508 154.419 cv
881.711 154.077 882.895 154.206 884.055 154.806 cv
885.216 155.409 886.097 156.312 886.699 157.515 cv
887.989 160.01 889.879 162.245 892.374 164.222 cv
894.867 166.201 897.834 167.727 901.274 168.801 cv
904.712 169.876 908.497 170.413 912.624 170.413 cv
917.18 170.413 921.221 169.661 924.748 168.156 cv
928.273 166.652 931.046 164.46 933.067 161.578 cv
935.086 158.698 936.098 155.193 936.098 151.066 cv
936.098 145.822 934.163 141.308 930.294 137.523 cv
926.424 133.741 920.363 131.332 912.108 130.3 cv
902.047 129.097 894.18 125.979 888.505 120.949 cv
882.829 115.919 879.992 109.75 879.992 102.44 cv
879.992 97.1968 881.389 92.6387 884.184 88.769 cv
886.977 84.8999 890.826 81.9126 895.728 79.8052 cv
900.629 77.6992 906.259 76.645 912.624 76.645 cv
917.352 76.645 921.652 77.3984 925.522 78.9023 cv
929.391 80.4077 932.765 82.3843 935.647 84.8354 cv
938.527 87.2856 940.87 89.9741 942.676 92.8965 cv
943.534 94.2729 943.815 95.6055 943.515 96.895 cv
943.212 98.1846 942.461 99.1738 941.257 99.8613 cv
939.968 100.464 938.656 100.551 937.323 100.12 cv
935.99 99.6899 934.98 98.8735 934.292 97.6685 cv
933.003 95.6914 931.391 93.8218 929.456 92.0581 cv
927.521 90.2969 925.177 88.8979 922.426 87.8667 cv
919.674 86.8345 916.364 86.2764 912.495 86.1895 cv
905.702 86.1895 900.242 87.6304 896.115 90.5103 cv
891.987 93.3921 889.923 97.584 889.923 103.086 cv
889.923 106.01 890.697 108.696 892.245 111.147 cv
893.793 113.598 896.35 115.706 899.92 117.467 cv
903.486 119.23 908.281 120.542 914.3 121.401 cv
925.048 122.949 933.023 126.237 938.226 131.268 cv
943.428 136.298 946.029 142.855 946.029 150.937 cv
946.029 155.58 945.191 159.708 943.515 163.319 cv
941.837 166.93 939.471 169.961 936.421 172.412 cv
933.367 174.862 929.798 176.733 925.715 178.022 cv
921.631 179.313 917.267 179.957 912.624 179.957 cv
cp
f
857.093 202.186 mo
856.231 202.186 855.522 201.908 854.965 201.35 cv
854.407 200.793 854.129 200.083 854.129 199.221 cv
854.129 145.79 li
854.129 144.929 854.407 144.22 854.965 143.662 cv
855.522 143.104 856.231 142.825 857.093 142.825 cv
857.955 142.825 858.663 143.104 859.221 143.662 cv
859.779 144.22 860.058 144.929 860.058 145.79 cv
860.058 199.221 li
860.058 200.083 859.779 200.793 859.221 201.35 cv
858.663 201.908 857.955 202.186 857.093 202.186 cv
cp
1 1 1 rgb
f
901.937 202.946 mo
897.832 202.946 893.994 202.161 890.422 200.59 cv
886.849 199.02 883.707 196.828 880.997 194.015 cv
878.286 191.203 876.171 187.961 874.651 184.287 cv
873.131 180.614 872.37 176.674 872.37 172.468 cv
872.37 168.313 873.118 164.399 874.613 160.725 cv
876.107 157.052 878.21 153.821 880.921 151.034 cv
883.632 148.248 886.774 146.056 890.346 144.46 cv
893.918 142.864 897.781 142.065 901.937 142.065 cv
905.585 142.065 908.903 142.597 911.894 143.662 cv
914.883 144.726 917.771 146.424 920.558 148.754 cv
921.014 149.109 921.28 149.527 921.356 150.008 cv
921.433 150.49 921.368 150.946 921.166 151.376 cv
920.963 151.807 920.659 152.125 920.254 152.326 cv
920.152 152.732 919.899 153.037 919.494 153.238 cv
919.088 153.441 918.62 153.518 918.088 153.466 cv
917.556 153.417 917.036 153.188 916.53 152.782 cv
914.554 151.061 912.4 149.78 910.07 148.944 cv
907.738 148.108 905.027 147.69 901.937 147.69 cv
898.643 147.69 895.564 148.349 892.702 149.666 cv
889.839 150.984 887.318 152.782 885.139 155.063 cv
882.961 157.342 881.25 159.978 880.01 162.967 cv
878.767 165.958 878.147 169.124 878.147 172.468 cv
878.147 175.914 878.767 179.131 880.01 182.121 cv
881.25 185.11 882.961 187.745 885.139 190.025 cv
887.318 192.305 889.839 194.091 892.702 195.383 cv
895.564 196.675 898.643 197.322 901.937 197.322 cv
904.723 197.322 907.359 196.866 909.842 195.953 cv
912.323 195.042 914.68 193.724 916.91 192.001 cv
917.518 191.496 918.164 191.292 918.848 191.393 cv
919.532 191.496 920.127 191.799 920.634 192.305 cv
921.14 192.813 921.394 193.471 921.394 194.281 cv
921.394 194.688 921.33 195.054 921.204 195.383 cv
921.077 195.713 920.862 196.056 920.558 196.41 cv
917.974 198.792 915.086 200.476 911.894 201.464 cv
908.701 202.452 905.382 202.946 901.937 202.946 cv
cp
f
961.296 197.322 mo
964.793 197.322 968.035 196.702 971.025 195.459 cv
974.014 194.218 976.612 192.47 978.816 190.215 cv
981.02 187.961 982.73 185.326 983.946 182.311 cv
985.162 179.296 985.77 176.015 985.77 172.468 cv
985.77 168.972 985.162 165.716 983.946 162.701 cv
982.73 159.687 981.02 157.052 978.816 154.796 cv
976.612 152.542 974.014 150.794 971.025 149.552 cv
968.035 148.311 964.793 147.69 961.296 147.69 cv
957.749 147.69 954.481 148.311 951.492 149.552 cv
948.501 150.794 945.906 152.542 943.701 154.796 cv
941.497 157.052 939.787 159.687 938.571 162.701 cv
937.355 165.716 936.747 168.972 936.747 172.468 cv
936.747 176.015 937.355 179.296 938.571 182.311 cv
939.787 185.326 941.497 187.961 943.701 190.215 cv
945.906 192.47 948.501 194.218 951.492 195.459 cv
954.481 196.702 957.749 197.322 961.296 197.322 cv
cp
961.296 202.946 mo
956.888 202.946 952.834 202.186 949.135 200.666 cv
945.436 199.146 942.231 197.018 939.521 194.281 cv
936.81 191.545 934.707 188.328 933.212 184.628 cv
931.718 180.931 930.97 176.876 930.97 172.468 cv
930.97 168.11 931.718 164.082 933.212 160.383 cv
934.707 156.685 936.81 153.466 939.521 150.73 cv
942.231 147.994 945.436 145.866 949.135 144.346 cv
952.834 142.825 956.888 142.065 961.296 142.065 cv
965.654 142.065 969.682 142.825 973.381 144.346 cv
977.08 145.866 980.298 147.994 983.034 150.73 cv
985.77 153.466 987.886 156.685 989.381 160.383 cv
990.874 164.082 991.622 168.11 991.622 172.468 cv
991.622 176.876 990.874 180.931 989.381 184.628 cv
987.886 188.328 985.77 191.545 983.034 194.281 cv
980.298 197.018 977.08 199.146 973.381 200.666 cv
969.682 202.186 965.654 202.946 961.296 202.946 cv
cp
f
1006.82 202.186 mo
1005.96 202.186 1005.25 201.908 1004.69 201.35 cv
1004.14 200.793 1003.86 200.083 1003.86 199.221 cv
1003.86 145.79 li
1003.86 144.929 1004.14 144.22 1004.69 143.662 cv
1005.25 143.104 1005.96 142.825 1006.82 142.825 cv
1007.74 142.825 1008.5 143.181 1009.1 143.89 cv
1045.43 191.621 li
1045.43 145.79 li
1045.43 144.929 1045.71 144.22 1046.27 143.662 cv
1046.83 143.104 1047.54 142.825 1048.4 142.825 cv
1049.21 142.825 1049.9 143.104 1050.49 143.662 cv
1051.07 144.22 1051.36 144.929 1051.36 145.79 cv
1051.36 199.221 li
1051.36 200.083 1051.07 200.793 1050.49 201.35 cv
1049.9 201.908 1049.21 202.186 1048.4 202.186 cv
1047.99 202.186 1047.59 202.11 1047.18 201.958 cv
1046.78 201.806 1046.45 201.553 1046.19 201.198 cv
1009.79 153.466 li
1009.79 199.221 li
1009.79 200.083 1009.49 200.793 1008.91 201.35 cv
1008.33 201.908 1007.63 202.186 1006.82 202.186 cv
cp
f
1084.8 202.946 mo
1081.56 202.946 1078.56 202.477 1075.8 201.54 cv
1073.03 200.603 1070.64 199.273 1068.62 197.549 cv
1066.59 195.827 1065.04 193.826 1063.98 191.545 cv
1063.57 190.735 1063.56 189.987 1063.94 189.303 cv
1064.32 188.619 1064.97 188.151 1065.88 187.896 cv
1066.59 187.695 1067.29 187.771 1067.97 188.125 cv
1068.65 188.48 1069.17 189.012 1069.53 189.721 cv
1070.29 191.191 1071.4 192.508 1072.87 193.673 cv
1074.34 194.839 1076.09 195.738 1078.12 196.372 cv
1080.14 197.005 1082.37 197.322 1084.8 197.322 cv
1087.49 197.322 1089.87 196.878 1091.95 195.992 cv
1094.03 195.105 1095.66 193.813 1096.85 192.115 cv
1098.04 190.418 1098.64 188.353 1098.64 185.921 cv
1098.64 182.831 1097.5 180.17 1095.22 177.94 cv
1092.94 175.711 1089.36 174.292 1084.5 173.684 cv
1078.57 172.975 1073.94 171.138 1070.59 168.173 cv
1067.25 165.209 1065.58 161.574 1065.58 157.267 cv
1065.58 154.176 1066.4 151.49 1068.04 149.21 cv
1069.69 146.93 1071.96 145.17 1074.85 143.927 cv
1077.74 142.687 1081.05 142.065 1084.8 142.065 cv
1087.59 142.065 1090.12 142.51 1092.4 143.396 cv
1094.69 144.283 1096.67 145.448 1098.37 146.892 cv
1100.07 148.336 1101.45 149.92 1102.51 151.642 cv
1103.02 152.454 1103.18 153.238 1103.01 153.999 cv
1102.83 154.759 1102.39 155.341 1101.68 155.746 cv
1100.92 156.102 1100.14 156.153 1099.36 155.898 cv
1098.57 155.646 1097.98 155.165 1097.57 154.455 cv
1096.81 153.29 1095.86 152.188 1094.72 151.148 cv
1093.58 150.11 1092.2 149.286 1090.58 148.678 cv
1088.96 148.07 1087.01 147.741 1084.73 147.69 cv
1080.72 147.69 1077.51 148.539 1075.08 150.236 cv
1072.64 151.934 1071.43 154.404 1071.43 157.647 cv
1071.43 159.37 1071.88 160.953 1072.8 162.397 cv
1073.71 163.841 1075.21 165.083 1077.32 166.121 cv
1079.42 167.16 1082.24 167.933 1085.79 168.439 cv
1092.13 169.352 1096.82 171.29 1099.89 174.253 cv
1102.96 177.218 1104.49 181.082 1104.49 185.845 cv
1104.49 188.581 1104 191.013 1103.01 193.141 cv
1102.02 195.27 1100.63 197.056 1098.83 198.5 cv
1097.03 199.944 1094.93 201.045 1092.52 201.806 cv
1090.11 202.566 1087.54 202.946 1084.8 202.946 cv
cp
f
310.124 498.749 mo
302.742 498.749 li
260.926 543.111 li
302.742 587.474 li
310.124 587.474 li
289.584 543.111 li
310.124 498.749 li
cp
.160784 .160784 .168627 rgb
f
357.481 498.749 mo
350.099 498.749 li
302.908 543.111 li
350.099 587.474 li
357.481 587.474 li
336.941 543.111 li
357.481 498.749 li
cp
f
1323.01 666.517 mo
1291.28 666.517 li
1271.5 707.782 li
1291.28 749.046 li
1323.01 749.046 li
1280.4 707.782 li
1323.01 666.517 li
cp
f
1369.58 666.517 mo
1337.84 666.517 li
1318.06 707.782 li
1337.84 749.046 li
1369.58 749.046 li
1326.97 707.782 li
1369.58 666.517 li
cp
f
808.346 421.421 mo
806.468 421.421 804.628 420.503 803.523 418.815 cv
779.164 381.594 li
777.911 379.679 777.911 377.203 779.164 375.288 cv
803.523 338.066 li
805.264 335.405 808.832 334.661 811.493 336.402 cv
814.155 338.143 814.9 341.712 813.158 344.373 cv
790.863 378.441 li
813.158 412.509 li
814.9 415.17 814.155 418.738 811.493 420.48 cv
810.521 421.116 809.427 421.421 808.346 421.421 cv
cp
f
844.646 421.421 mo
842.769 421.421 840.929 420.503 839.823 418.815 cv
815.465 381.594 li
814.212 379.679 814.212 377.203 815.465 375.288 cv
839.823 338.066 li
841.565 335.405 845.134 334.661 847.794 336.402 cv
850.456 338.143 851.201 341.712 849.459 344.373 cv
827.164 378.441 li
849.459 412.509 li
851.201 415.17 850.456 418.738 847.794 420.48 cv
846.822 421.116 845.728 421.421 844.646 421.421 cv
cp
f
1316.86 526.312 mo
1316.27 522.241 1314.65 518.038 1312.12 515.308 cv
1308.15 510.364 1302.06 507.196 1295.23 507.196 cv
1283.27 507.196 1273.58 516.888 1273.58 528.843 cv
1273.58 540.799 1283.27 550.491 1295.23 550.491 cv
1295.23 550.491 1299.08 562.2 1287.59 574.149 cv
1291.75 579.026 li
1296.66 575.8 1309.28 562.691 1313.23 552.575 cv
1317.93 540.514 1317.45 530.384 1316.86 526.312 cv
cp
f
1367.13 526.312 mo
1366.54 522.241 1364.92 518.038 1362.39 515.308 cv
1358.42 510.364 1352.33 507.196 1345.5 507.196 cv
1333.54 507.196 1323.85 516.888 1323.85 528.843 cv
1323.85 540.799 1333.54 550.491 1345.5 550.491 cv
1345.5 550.491 1349.35 562.2 1337.86 574.149 cv
1342.02 579.026 li
1346.93 575.8 1359.55 562.691 1363.5 552.575 cv
1368.2 540.514 1367.72 530.384 1367.13 526.312 cv
cp
f
952.607 347.079 mo
942.606 347.079 930.734 355.25 932.473 365.718 cv
934.501 377.92 945.858 376.207 950.867 375.858 cv
960.106 375.215 965.927 381.282 966.506 389.182 cv
967.124 397.62 961.286 404.788 953.547 405.996 cv
952.648 406.137 951.992 406.948 951.992 407.885 cv
951.992 409.068 953.022 409.961 954.158 409.779 cv
968.818 407.434 980.077 394.359 980.077 378.621 cv
980.077 363.013 969.366 347.079 952.607 347.079 cv
cp
f
1006.34 347.079 mo
996.335 347.079 984.463 355.25 986.203 365.718 cv
988.231 377.92 999.587 376.207 1004.6 375.858 cv
1013.84 375.215 1019.66 381.282 1020.24 389.182 cv
1020.85 397.62 1015.02 404.788 1007.28 405.996 cv
1006.38 406.137 1005.72 406.948 1005.72 407.885 cv
1005.72 409.068 1006.75 409.961 1007.89 409.779 cv
1022.55 407.434 1033.81 394.359 1033.81 378.621 cv
1033.81 363.013 1023.1 347.079 1006.34 347.079 cv
cp
f
113.89 342.073 mo
113.655 342.024 li
111.638 341.469 109.546 341.318 107.486 341.578 cv
107.375 341.578 li
103.848 342.066 100.435 343.715 97.7268 346.579 cv
91.2457 353.432 91.2457 364.543 97.7268 371.396 cv
102.269 376.199 116.167 379.938 124.082 381.748 cv
124.167 382.488 124.216 383.236 124.216 383.992 cv
124.216 398.872 112.633 411.483 96.0678 411.284 cv
96.0678 414.993 li
99.4866 415.622 103.481 415.517 106.728 415 cv
129.26 411.413 138.187 392.201 138.187 374.286 cv
138.187 357.361 128.179 345.09 113.89 342.073 cv
cp
f
163.759 342.073 mo
163.524 342.024 li
161.507 341.469 159.415 341.318 157.355 341.578 cv
157.244 341.578 li
153.717 342.066 150.304 343.715 147.596 346.579 cv
141.115 353.432 141.115 364.543 147.596 371.396 cv
152.138 376.199 166.037 379.938 173.952 381.748 cv
174.036 382.488 174.085 383.236 174.085 383.992 cv
174.085 398.872 162.502 411.483 145.937 411.284 cv
145.937 414.993 li
149.356 415.622 153.35 415.517 156.597 415 cv
179.129 411.413 188.056 392.201 188.056 374.286 cv
188.056 357.361 178.048 345.09 163.759 342.073 cv
cp
f
1301.21 381.196 mo
1300.58 380.136 1300.18 379.068 1300.28 378.441 cv
1300.18 377.813 1300.58 376.745 1301.21 375.685 cv
1304.95 369.367 1314.57 350.204 1317.8 343.002 cv
1319.77 338.595 1314.23 336.976 1309.83 341.137 cv
1298.74 351.612 1285.76 365.783 1274.14 375.986 cv
1273.96 376.143 1273.8 376.316 1273.65 376.503 cv
1272.68 377.699 1272.68 379.183 1273.65 380.379 cv
1273.8 380.565 1273.96 380.739 1274.14 380.895 cv
1285.76 391.098 1298.74 405.27 1309.83 415.745 cv
1314.23 419.906 1319.77 418.287 1317.8 413.879 cv
1314.57 406.678 1304.95 387.515 1301.21 381.196 cv
cp
f
1351.15 381.196 mo
1350.53 380.136 1350.13 379.068 1350.23 378.441 cv
1350.13 377.813 1350.53 376.745 1351.15 375.685 cv
1354.89 369.367 1364.52 350.204 1367.74 343.002 cv
1369.72 338.595 1364.18 336.976 1359.77 341.137 cv
1348.69 351.612 1335.71 365.783 1324.09 375.986 cv
1323.91 376.143 1323.74 376.316 1323.59 376.503 cv
1322.63 377.699 1322.63 379.183 1323.59 380.379 cv
1323.74 380.565 1323.91 380.739 1324.09 380.895 cv
1335.71 391.098 1348.69 405.27 1359.77 415.745 cv
1364.18 419.906 1369.72 418.287 1367.74 413.879 cv
1364.52 406.678 1354.89 387.515 1351.15 381.196 cv
cp
f
1137.43 408.151 mo
1115.13 408.151 li
1128.75 348.73 li
1147.22 348.73 li
1137.43 408.151 li
cp
f
1178.68 408.151 mo
1156.37 408.151 li
1170 348.73 li
1188.47 348.73 li
1178.68 408.151 li
cp
f
1313.96 838.141 mo
1313.96 906.763 li
1284.96 906.763 li
1305.69 838.141 li
1313.96 838.141 li
cp
f
1327.12 906.763 mo
1327.12 838.141 li
1356.11 838.141 li
1335.38 906.763 li
1327.12 906.763 li
cp
f
1128.52 833.097 mo
1102.25 859.367 li
1133.77 892.67 li
1116.46 903.647 li
1116.46 911.807 li
1146.07 903.647 li
1146.07 850.645 li
1128.52 833.097 li
cp
f
1183.8 833.097 mo
1157.53 859.367 li
1189.05 892.67 li
1171.74 903.647 li
1171.74 911.807 li
1201.34 903.647 li
1201.34 850.645 li
1183.8 833.097 li
cp
f
959.705 543.111 mo
959.705 525.452 970.712 509.468 982.297 497.907 cv
961.551 502.496 942.19 520.985 942.19 543.111 cv
942.19 565.237 961.551 583.727 982.297 588.315 cv
970.712 576.755 959.705 560.77 959.705 543.111 cv
cp
f
1001.33 543.111 mo
1001.33 525.452 1012.33 509.468 1023.92 497.907 cv
1003.17 502.496 983.812 520.985 983.812 543.111 cv
983.812 565.237 1003.17 583.727 1023.92 588.315 cv
1012.33 576.755 1001.33 560.77 1001.33 543.111 cv
cp
f
1148.85 511.951 mo
1107.84 511.951 li
1107.84 546.875 li
1127.91 546.875 li
1127.92 547.204 1127.95 547.53 1127.95 547.863 cv
1127.95 560.03 1118.13 569.056 1105.96 569.056 cv
1105.4 569.056 1104.24 569.056 1104.24 569.056 cv
1104.24 572.308 li
1107.63 573.585 1113.29 574.271 1118.41 574.271 cv
1135.22 574.271 1148.85 562.177 1148.85 545.364 cv
1148.85 532.916 1148.85 511.951 1148.85 511.951 cv
cp
f
1199.36 511.951 mo
1158.35 511.951 li
1158.35 546.875 li
1178.41 546.875 li
1178.42 547.204 1178.45 547.53 1178.45 547.863 cv
1178.45 560.03 1168.63 569.056 1156.47 569.056 cv
1155.9 569.056 1154.74 569.056 1154.74 569.056 cv
1154.74 572.308 li
1158.14 573.585 1163.8 574.271 1168.91 574.271 cv
1185.73 574.271 1199.36 562.177 1199.36 545.364 cv
1199.36 532.916 1199.36 511.951 1199.36 511.951 cv
cp
f
1144.63 691.482 mo
1144.63 681.81 1137.78 673.969 1128.11 673.969 cv
1118.44 673.969 1110.6 681.81 1110.6 691.482 cv
1110.6 697.039 1113.19 701.981 1117.23 705.189 cv
1118.08 705.937 1119.08 706.653 1119.98 707.209 cv
1120.91 707.791 1117.02 721.64 1114.88 727.86 cv
1110.6 740.326 1123.84 747.039 1130.76 736.045 cv
1137 726.142 1144.63 702.769 1144.63 691.482 cv
cp
f
1193 691.482 mo
1193 681.81 1186.15 673.969 1176.48 673.969 cv
1166.81 673.969 1158.96 681.81 1158.96 691.482 cv
1158.96 697.039 1161.56 701.981 1165.59 705.189 cv
1166.45 705.937 1167.45 706.653 1168.34 707.209 cv
1169.28 707.791 1165.38 721.64 1163.25 727.86 cv
1158.96 740.326 1172.21 747.039 1179.13 736.045 cv
1185.37 726.142 1193 702.769 1193 691.482 cv
cp
f
135.205 517.877 mo
134.757 504.902 112.573 506.006 113.733 520.715 cv
114.951 536.146 117.657 551.243 111.962 565.688 cv
110.348 569.78 109.904 574.444 114.105 576.681 cv
117.646 578.567 122.151 576.438 124.391 571.398 cv
131.622 555.128 135.845 536.421 135.205 517.877 cv
cp
f
170.053 517.877 mo
169.605 504.902 147.421 506.006 148.581 520.715 cv
149.799 536.146 152.506 551.243 146.81 565.688 cv
145.197 569.78 144.753 574.444 148.953 576.681 cv
152.494 578.567 157 576.438 159.239 571.398 cv
166.471 555.128 170.693 536.421 170.053 517.877 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.3
%%For: ( ) ()
%%Title: (d_210_13.eps)
%%CreationDate: 10/2/2019 4:51 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+me+!6[YA=/j8VPO@$S=o89csuQOC!aI"ZR@RES917LZc.]1NSF!<tWL_p)55p3bM3WIccS15PFE6>.INmpZqj\j;)U_
%dW2@]jVCQp;0&[O)LqbVq!j9b@FXQkW@jTrK;FoNh:5XCp607VoGc?jlD;d+<,3R4l_UQ1b1E]eAnr]Zru'C.Hf7!?$$.2_C:4%b
%cEDu!9;plfRjZ0I2(I1H=(+1'/Lg=eIR9=W[%J07^sDrQm96LC.7XV>5:USY_>P/*YtsT,;:KJNa.ZKJHZZdZ-TeYt;s9\KoOSMN
%HeT<OkU:2!c*1KQf)Pg#KkhHAk(;eJlr;`@#J%>YHu.-j&B&s6^Oa/,W0RV&<OrlnZ#?WeIh:5+MZ;[F]q=f#QIBmZCZjUu^c"#M
%^f#3-$+Dcu61&@dJ!m-.dX3t=NN9:/ft,1T@_LgcW_j5[&OQ`Fd+'EGMHP\?Uf#C.T0u+M<F3d%!4M"MFD05[WKO!T98;Ed>hrMf
%<*:ZiT]iROo_1uG722&_-:\cRfflG6$OEFE(<ibPWr0kFV]%GMe1,;PSOL<(CgHf#jf$=@JHI<$6c>#G>iVk5E?$m_UGe3!^"U;6
%?-,*a_XG2'>j[81,=H7*2mV=sC<-"Ve5_l:(BA0PR=hc\)bq_VQE(q6rn*)<Ml1<a<C.?/)Z_*!d=?)oU)sA)ml)c[Q.cR3=qlCi
%:UZ^WEfB=mQ?1[d_-V-ps'>/eG8Va#h2Z5Z;H3$/^DB6=/D*&DD&co)Y"ib@"Xd-!V#pGE.6iF`"CXAsagj#Tk)8GqSH#oiFK!!I
%Y2cQoiN);(CHaD#eTH8kFhFd@GZWMMh-uMHZYGe[`@MD3=V_dZ/1bC9`M*>>:$_S3AY:+t<Hh_"k.4Y'5N++.bNH-45*&_8H+]?e
%A!pd<mhUhI7Fd;b/5Rn'9!$LCbH+489m.>RMYfHo0>:jL*#H=u0cZMs/\?dj_H/:@K>L\.]9j(/)97H7p^II^Y6^"[('BPK_H.X;
%I__Rq>hCNq;q;%%L-rj[/5n+ZDdo!1o5(;W>dC?G=&tTGSdg3mTCn5P:Rr:p-&Sok/;@ZQ<s6JXP)Z!fisUVaYS`BtX>HCb<Z/r6
%YP8P3aRB1:H0=]FI)TPS7XSd*aj>`90'`PH.<'i!0/,sK*U=o=HS!/`:Ws7e4W=BDSop%#b[???@n"<XQGES/*5qqVFZ+8`)omc<
%=H)3"NfhQoX,O5a"pYFa"dTNg@aiBO@$iRn=Wi^>46epq)28iW8As5ffk:7nF3e$%P=M/[$R<[3\rXfuq[>Rh_!\NnhK_Sh%("X@
%ZO((`MY+qc3Mq7+#HA0sNTj,1<_N`,dfg3!Qq5b;C_DsSYI9haGVu^$@QLK74=-`6U<B9B#+/CZ@=Wk&c<7!ds"o_kMVm*Z@Bf4j
%48XZqVTF:Ehq=W=Zg[EGqf<bNh/Quk%fc,_Ft8#SJ%j7Ca7&@*WWrS%.=PoZK`_,m^U$-nrc(,_CP]01IG&i7NP4?h2'[%,`Lr$n
%RX3NB`H1Mu#)\80]AHJ?iGJ9)-oQJhmmYR1""\7<=BMp"1,[=b"517t1KYR!!k7)LqdsSf'cm#93EVRFLB7KV[fc=;<="Nb!YWkb
%7J8at#l]kQKO*4Sh)=7V@*@%1/(lTR`<]SL&0+^E*&a#F(8tO8:5/M&Vh*k0=lP>L\,:V[KE$8+GGK$LB_]$$]VX;aQe+)V/rIER
%Sn9?9\/nU.r+$PTKtspsphj<)D>:7mYk@=(3;JTbE=QEf!7O["GP1=k)CfU,T)K&2_\cr^kW?!Opa&d;I#%!]$JmOcc%>sL;G6`'
%.O%JfI="K7YLDJ**J[=%"(1WgF$BI_oe'$V_9^$O4>m=I^:5RDV>+=q[>K^bmc3b8*H0n?ZQcn-Gi_)u@-!,?n;2UJ`PP@hr%9J[
%fB]l;kKAhAI8Shmr@IEI$8`G1Qd5)W?*GX899\P>%`:#3<W#SH-NNd#<B#:8*Q8>DLrQC(T'*m[I2kK0AJ)q"k$8r_hT`AQbd5T-
%l8W!^(j0:?#]6kA)oG.s_kdH96N*b+1T\T1i<.1X[)Jd;2u6fR)hN[RN8@jr;`lr+!P_-6n:7;(<f-RtCr#i9U3T?(.c\)JP4$>=
%C4.pid!.-I8ha@qp,i7ClV8r]MrHZ]Z3!FAT?RT>#I-Q1R*&5.fX$G\ij.+cn98,[r!bm,pRY^]FW]E/hR3?:W>kJY%CCuLj(5%;
%Od6m2@6_VY-j"Y=<n\Y>O+t$5@,D(Ni*%DTqgM7__:TJW096JicF7J0l!eb:k;hp:]6-.!OXkDfli+M"^TOLV8M\3@1U;qrh)ZK4
%TF1VCrf4S726/"[WVWeu]q*aO)$8S5:ma6c[-M1og<r57Eg9c)9Su'i7."$]\]nOOC=4(eopcm'E7a%e2,itSnkVk;Wp!-sO$B>'
%Ja,%,#2cEOMT^l524TOa>g"aWJtc6"6i9]M(D[+]cT94M$iF;CZ^,/e=<4*]ZXQ@YFg^H&54CXI$nr'Doa;_WhajX[5;E4PE$PG9
%0nA?[fed_RL6"DN^\GLOgT5>C*!]+L[V('$3_^_:DD9HHM-f[o=,c!MMV!GR,b(oeYjY[ITXq/0Y9&HPbV-?,=SlVnE<+@oNo-hN
%%Wstg@0)%`X6,3=^iqH'1=89Q)`]d'8U*mc&pKs%65SZp<hI/g.lgMm]J#@F'GRC26-'U2EB2=B>4uF;d<"?JU>nfJi^eu]Z"S1V
%7=R9pF)jS=(3lSK*,U#HhRK'IM\iRC&e>i-ne&kl?K<nKPdH.Z-2YQ*8G5-GcMRg(,\$bI"C9pPjEENRGqmXHo9u4\;YWm,7TSH<
%:U[C&.Z-5VUh1Y1N5?8"-!VOCc=^>k_FmX29WE]P`9+fRq]_2EcT$rXoQXi-E5_;RMG#a5,A%YlpD@"4Mih/KaYss@8c_ju^$qpR
%;N=soeI_dY>e7Nc-PAk)8XH,d&nUPrkB0>CP1,em3)VV\-Yh[_+PDOc\sO%l4J%[HHHq^#-*uku_[-t<beb+hZ+#<<ZDfWiTg[@A
%?j5+e!B+Q:79V\ESsXduiJnaXOtFWU>NFjNUj6Ao,<O*0-fZH\",&b;R.T)==\DlKe(#^N:JI,oZS9B(Y^4M%;mRs9-+PL+N8XI]
%)nVI1bU$hGRfBF'Ou"kFjdh95MM7qCGC^:+8$$`9h+G+.;,^"`Vu&DR);dI.M"Y;;6;/ce!Si=la"3`('2BRG@DOYX\R8]=ih>:g
%S1D*I^5Huh0f%J'$BftOU'^1eB(Y&)C_dYR/g'[KcKD:)b/U=(B/a>&.E,Fa!KnG-#usjH]H((?T4g5RLZpruSZ\q+C*E&)bDL93
%:qZB78BFm_V;#C)$,WoVjXVc&o:E!=AJj:seBG6:'hhNPJCJ'h(()+T&C>-?9!Uo\F7Z3u_SD"(67nGe8Xa2"\R-Udf$Ctu^_gbD
%@$d<k'"2J]5JQB`$R0.</6E%g4))L!P@WL,`SLErOtS.2:EDMO_=:f,MMm.&b19kffT[FM;^K?o^*e3#+DbJFa@/]l3DM?2DbM<K
%MDHnl3.[l=$mT<R%2NNASWlJ'`d#<7ZX3#N.3&t8!b!BiQSGZWX?gk_5rr`5_O)$-CYVE6o/^5<7#SRd?lcMf/.-eqQpiaOY_e47
%M\hN.Vp^##lVG_<))u@oB#MofP8MX1$o*;*&`-G!O_-f!Q3A@e%?;Lcee*h`[7]+H4ipFX[>;Ac:tZ!CTS4%(iZ!kGlCoB$b-?Kt
%9a"p]]QM&RF>_<S<B'k>aZ]gPOX72@KuJos9qN+E-XB[K6;iQ;UC#fF$4K_R2UZ;1X2Xf9VsQ57/>;ua8U$"#!`,V<@-RejK`Sut
%mp]>BfL;5Q-,h0[9H4!$]X'dKeQ0t4@RcU5BI3[SJ>M.$l@Hl50m[B\1jKQ5:iqj=:TWl%ID3d:?>>iVg/%E-W+duaF[U5c6])2d
%,b+n2)T4CdgKPY3H'boU"D?@mVRU#79X"-KlH'MDi?X^CAmg9IG0DR;@R;JV0n:OpM7JHpBr2MQFXPEb"V/QOR\\Ugb#*<D$]p2/
%(?N8H;AnBpN+EUo<7itF[,T>(&WX)A>2MtV*5l]W#V2.g,kLA*Iol+Y\He[inpkF,-]f&6m\WRYgBbNnBnIfsWP]*JT"!Qnp^-=?
%B`N9;72Y"QlENs7nCa6t?_$(k9_,bs?]MV_#J2,3X"V>1*Z&R&N03-BoCXUBCW$cE(-d#iXB4`Nr,2FdmN"a`:?,+c(J$c\]W+>Q
%8e#;&rqtdk]B>\(<',&?X'+mJ[VKOK5Q@,Db4X43pGOM/lcmSe;)u+8qAm;oj^or$2L!pb9)o(.b;)_!V(jn1@'LV.UE$lRFm5rO
%cVcu`cK`ZT(]aH@;#;cCef+q2XBZNs#M$$o2KNt-!o0pU"a<;#V\gZpN8!_V_2Ohb###CjTe]pCLD3;7b0ndWV:Ga#ILDY4^['-;
%>d.tNdqUg/=J_kXT4eqWUW]TA]'+mjJ,L+\X`gT_*>K+ACa#<<=9:=X<3,L7?a!K\jf!H(C0"(c%JLu]?f_-"<%GH=A?rE/6K-q/
%hm,MkLX:hJB%XVlP]D5Ze%3U@fBZEC^!D,[;Xtmb_O=UG4o0GH>-Ct1=0e7T0*a2SPu9J#qUoURfoR$QELXB7)OmAU;=FYC"7Var
%<p*Z"s5173C\;HLDN7XG7jXUlIVkm!a`dI*pT#%'k][8jU>Jtn0Pa2Gn>[YG?&P9\;[VUn0TlI\EbLl9^I)C&]9UhWe;e<e<iH,/
%aW5LRm3j=NqGdV.WT9'l_F?rS-V>H!+O(R]Y"@lg\G55/L6hFH8b'CB%*KBIc7?G.nI\o0:/q9dcVHPI#6;nrrpf7!5M#i36dajJ
%kS5b1?b2uKKqIj?rUZ'Z.W$)sPc1Hg'TI]qE?Cc\)5^gZRK9FY*l+&m4]0q@>T<Yi?Yt*Hks&L/CJnl#.Y,g)Qch$X?9Z-pGR<lR
%l!(mh421$e0SBE5.!ZO0Mt0?obZf?SmtfE#"W*4GV2P1ZHZ](*6#eAkj;srg9q!5:8Pon%2fd%RfQ)kP_?\Q;2:\LT$EiE&3db2<
%*CEo5Pi5`;d(pEc8e000!$j[fE,oGRIZ&NIC6jI\0bOjJ!J.bH_h$I/C#E,#>B(Z5ARM#O#EnAq9u(.4r#eI*JROscddG(G]*B\k
%F9Qc/Ih(P)V^qQ\^\PR8!Fd*6Mp(.aGe&&j'F=aG4?s5Y:rTY]>ID9eYR4Ffnh&1.!/!tgY]NOG'XM0OB&<.\M/C]E]$Q!`P'#Y"
%?phl^!@1\klL8ptGB@%JF[NMTBRu&4id;mk:iNt;GOl;LLliIG156c_0SH0-!$oV#&J'sE&`3d*0R^jjIEbi%:dqSG_:"t]d.9@9
%bQ6HS4i>`3bl`m?/\$A$:Jb<4UWZG<H$KSa9)]RE<E'TtatB>q[A_2?:L"*1Ou;GoqSWpbf6'7.GOs1h!YE')WR+cg3c02/LF/1B
%_;$`?!#U7g_pi)(7[j/S,E_s5rAXdNVIW9&(a^ek%EmeK,5JHF!A%C$<.M)bY_WK7V?KWX^qtE%]QmWAJlspgQ3,74_;ZDa";[Y^
%"$@%N!c$eu!0F!i.tB;lTT*BL`+snDo\h1/AXQ)/^g)!i8_sMXF?/TR!*2V<F+H."8:!OGC0u.),<23_!-3*lj/N<LG;N#1Cd80T
%J5o<k7t.;nnH6B62n96^RrB%CLRDg#jI>!NhhFc`O!pFDE(n*>m\FB`_d="@)+(q\?/f4]_,ASGO`I5Y>bN7*V^.gpFg8Rm&l2-5
%^9ULVBSeRrYYYIifR'Z'7.Ccl$*+*4mO!H26e5t"d'EsAJT/Q(&;IHj!*?u..C#s")e-q)jFRSL+QWZi<2m+)kpisrJei$Fc.?41
%cpq\^VIjMQV?sJsgEu`5b]/d.(*rA8k+"S^;j8P)>pR!Z<D<XN7Q"1=[/hWpeQ"c_n&7F!`3!b49'E/:d]q^V'i23qU0*4"aB3O)
%((=&0<D:3"I^jSh5RdBDi:.:t/P"2^gLWWT96UYtY(?XDm'a0>%QPZ):G;"h"Nl]Xcg&J3$SbFQ?lgkX7a$Ff$;'cpY*IS>r.NXc
%d[h/.>qg+R>o(1KrlQi<E@#k75T'fk@E3=D8%"88@M_<&n[UR?!XhAD$oKfo"sohA!(%L01(V=-".)Hf):Qkr56FYe"Ml[s1`qB2
%1]`3a!`WabRc*eYklX36]]"e*J9k,o[3lLMOB\piN*ak=64-!ipjj6kJK:,/!TY^%2Z30&2N]ah!/?`;&nMi?1:b[GlYAgk':P@!
%6U=F@K1fXARO"e8rqeR/Ec,9)$4agU]$a2]>'WdjN@AG$.u>A['+,pg-=%D%Cq=p$6]!`&Fef;!#b2(.*%I7J[Bu_\7eKY-QpSbc
%ZTZG*J0?-&A*PBNX%8&mPYS*!$?7U"ZL:F-%;Zhs4Q%n/OL>7[^'Bqo^r6[84HPDm7Hbsqd$+S===dJ!rX*='oeXQlJZ[S)k2HUZ
%.:'ng0MB3DR)i>LSc)$:ONNu[CX@"8X;'FRd1U7'q("uMbB6DH"9hBWZ<bj`NL2B^Y:s'lX1sg:'0'5e^p3">cuNT+3AIb.(fsH@
%.jmg*5\[2=h#arflIW.]l\<i`f4NW\D>%iX;Gtgf?!D'r9XeUrf)lok[P.#Ynfp`V`$>-oq'&_:-L=g,B:&FVP$3"3f;M?CQMNGe
%V%_R)_JUWi>*S@sYEWmZI\V?Q[&&p0W<&P&k(7,rFlI)Z]fScu)VJ[q+mDW@2Zb7HBGGVPe9A\^dui?L:>.a1`.^Wl$QBQI1k=1R
%LV<eV)r[C;MgJ20mKlV,-]_'Oe!&9^P+PQhM)?,/nVLs8W6n/\L?UQnij`Ah=er6OY/3%2QOGF'lR6JNOTc_/,G,Q_,g9o^`*O[]
%#aJ>ATEh+oWV%(;eo+4+K!^!0o+r%r+JE#dEBLC2"C/_2"YBaT8Ulio#o3HKRYK<;qWSI&\jN\#+Pf`uB+nqirA=nlDL'YFR&6Nf
%E^4cZT*e-p<.Dej)G@>On)n*$l=,o3*gfgKL8:<<&,XajS+sa1X.VG9<-8nuAsA/sJ[gG#V?TXm&0")Gp2`#T_SN#K9d&a'hP=pt
%$!HVIJdEF@P_4bp4>`GpI&Gdo2[4FM<oit[,.E=B0k88`VN<C_MTZkK?@ar<#a_Bpd?.-o-@lAZ78-%3c6sLY7MM-!E(<JY<.RGI
%U$!oRs!!mGLtM?W#S+%0iQ::0G1OYcgmHNcZ^9(6PgTX_UmF,qR$C$.4&.4#CrTG'nVB!:F.I9@?"RH67jgEmWW?(R-FK[1MSZ-Q
%:`sV+ZU8^2Aq5QUF^W0b<][BP+-:FU/+&_3=BtpDg]2ajmL?te"OH`^1tN>_%>!W>"JDA'5J_[1kW:)#!EKS%+#4t#po'tiC+.m@
%!e?@%_MQ6%,MqTQ]M2OqKGgtUcr@P/JJn&mcEf#s(K-)[4,G)@6'*i8h^/QNBZK&n^<TH%0`"]X2<Im0\7:LYf7\d9$!\1T#'jBp
%dLOC'B9"q5HkQuLQuWn_4r;<^M.N$3B)GGR#[_>55UL/B3h/<i"P$oW(!n[G&SdsDG2NRR&/:@\#+#g`k+IM56=_:c'#lYfE?8]P
%W'AB[CtaEi5o_?STE)n'6+Lu#P<n;"F&[1uYY?hWFC(/JM?0uVC?*GG0rE`VkbE:jBM4;*/on3B<IHr0D2.Mh$o`D-n$UM;DB=+/
%5UR3:?R)J3$$+OMEOfK9qi3Ma_:h/-YV712/f-Z(RZAeG(;NnE:8%YfWSFFbAj%s:Kk\klHZ%[BE\eA9)#;D"B84,s#='Gom5'DP
%pndRTr2KT,]+fi-(ZZ>#/'fgj6_@^,^Kc4Jr$'G?jW4DU?I=Qu_<(s$JtFSJaW:4g!i;A5UO!WVj:s@Jprkpqq!V\4N'65)GK;Kb
%!dR."/i1e7'9&V,2ng.L`f,Bf#,jYnd1lZ!HGZO>-Y>@d-93I93%(R_-Y>=c-C?k2Zp]sm"l*tf9Y&]6h,&Ll7_S$!;(mWfIlk(S
%rKL;!Hae]9gQoS@P[BpW5NI9fgknI7:aKm2i*stY&Z6#6.AI/FE&#,7g)WZp7hP[p#OMstPRYVE85[D#K:%JCUjXYc"b_RHgP@2c
%&N(JOOi7d6KHB?:-ERb@0*\`uP7[n2(N7/QlZ)=3VHD9CgZ?]aW>0bo'"aa'@fi%?fdA,>>NP4d>KRC2+c1k''%0=lUKA]HRFH)J
%EQLUp9u9Ti]?=rNpJ+XmQYDj1D&%9Ak%IF+4e&N3J0PIZA7p-c1MG)CMS%Z`do;O>DCotL1?T1J_#4\J?NtNq8lp?g>ohjiN;\mD
%D_d=Qd%m"+9m\9ZR1[0%FBh)tZV8@BJ<?MJD,=h`8`P_u?1b.SceN04n5hmK/<L"U=90Hp5SkI^Q28Im=;dciJT3Gj^Xk:UVJOC/
%lS6RR&$u+@]4r2n@4>kKA5[-Q5Z/2b@P_Y>HM>)lgM[-`QtF.8YoM-%@G/l=UE/&n+r%h%id7&,FosEW_YDuD!kftU@"?g8!;,a]
%EElndaG^R?dh<D@(VG>-Aq^D9c2](Vja3PDh!=n0O2)'PZ[pZ'A#($(;tF_<ZTAX?)4f>sVpi\R1nY7(>F64)Oa_`9F^9bmLn\=P
%V+_QKO\D8=g8Fo&m[b5on$l$VLg=2u7iV2i8P&2"mE3;/==f>i91%bo'g&]FEmCSR#M(uf[t58icQ)K^)s@q^Y:qL]pC"<@68Y5i
%),DZ(XrXYS0GB>SIO+`XDX)6T`i[A-.q[_ZB!*h2R3&'n=,dMGDK)R#n9SFVGu%kPkd)PfSTs8.jnoiA4n4LofPFnb]E[0kl-k-C
%rmN1,U]J$,?*sB`Qg-[CL./j"7qFg5!Q,9MA<8OC&kg:'()GbY!A8&u!IbT(ZFF>^bUG<AV!5hA-(gYsbUB4-V]ZtM>@"7bM'-(Y
%hH^]h@:ET::Qtt'*&5H$n-ara5jJICUBk=!L#2')L,("'jT[-$T4E?CfhVemE7g1kk)dU8^]nC8@RiGlknT]?dZhF7s0M'I"(keR
%"Jbii@<$]b0ZZfsmhI,3dGq>V<PkP0aSM#u$X%CMIgTGF1(alg_*t9@Hfjh54:4KS,C]mFPngU\Z'VPaXJ`/'XLG:G0Pf>(<%J1,
%jY1u@I<RM9+Ip?_@b]CLQUE<^9-[N5joAZa70/m;,b-:l?;kZ,P18k<&U6D,:jCE3\)uBKPJAlE'[Hq.B@E/+M^:cTP+1QQgd'Yg
%)ZdL3#k-e[e[n70pMGf2P?uO:&-u\Uq`7G-hDA3DK#NomKKN4="H+Wp`FV:q$@@[=:P6U"Gh"3ESH@AFn.Y^Q#Z%JM*GsO&e.]G3
%_C):[r.-c2I9hNH9=&m\dhtKV1(7e4P8P#+/_O:n&bJ(N96p`K4s!"c[6>21+KJ2a>%-b5Sc5iZ=X@tl(_-o-eecVZ?$J`DJRija
%n@3D\FC?@*KF,4HmAK3OMCS:^!SROQd>"cjpk'oF'ic#Vd\@K5!jEW+Q-i6*7LrX]+<UG9@PT--`?^e&aeQemAWm>A5Des(<GP$W
%+pV]7+R#Pu75IY;,@ZdG6<Xmug'f/-SPG%f@t@2^Ouq<TlT::$H^t!1ZtBut<J\a>0e06MAW(?&'^m9a`sg3Y.qc-%TKEj2#:!*>
%?n"3aY>WjaiZ[i;qNHlQ(X6k.lpbZ+p7f+NKB<6O?2i!LU_N@/D_&Oei^gG;"!Wr&ODJDcm7T]_K(Q<>isa0fAtY"\5+.cJ&VU>e
%/IE\5@AFtE<OtmaY>3-+X2Lj&&r:r@"cQD6AAG-cJ\%*PcuF;dN_(Q8gW:qn?<0=')*?njP@8(oTUf34ZfHZiiU@/`1Y.i:=C!!5
%.L>3u,U8qN,9DoWkF#/f0X4Nf54O)_Wi:EfaoljH,-.Z+Li&%/P!@2V)i1#%jBdYI+0^a`?U(j-'mP>3%#m7fTbN36\M+;dfib2T
%Ys8c4AKF@r1X3'5?/6LS9aJr+od(MkGJnmV#A)QhQ.uF9O"h8^,#6o<AFB,`puI3dr?hq@N753k-u-k[EEu%m-bUqfFJ"_Pk@3;)
%3&X[SN;r\YpS2srSeQm*;?E!tb[\JF`#oJ",f7Yj.Y8!lOm#(q/a=_TS7"!u@K?tr9)teDl/R>DiQ4HHU,JG6`5@do4EAp/4qt5#
%aN#0[$tHtkA?V):)<$IEq=6WJhi8J!/EBrBk5s#ab4FGTfZ.HtK*l9^K'g;!%SS&P`uq6gE/W!as,>&?rYDt"/NRB1Cklgid?[;i
%qJnXti6ltfK,r=8.W%Ic&Y`!uOOD>=<M2GqCatsV-H-b[.pB5*T)j]ho5]YT3BRYrjXN'5FnohD'>7"]b9@JgjGV-D@d_^"[EH7q
%<gTDp1_j<[.@^\[puu^he8Lrn@[D@sa`h6V0LUr!EgM07pP'M2/WjS)`#=3'Z41cXkq+g(?*U5#rgT\g7jV5#%p'D@I*s6\CVCWt
%B&KiIaQWV=GqoA8Y3h/3B,F3mW*e1DJbJ9T+U_>Fn%J7L@LNJ*QMibbP&ZG,as.Pr6\=/s7e2;$.8PaAO"N.N0uDT<'BUB^C_Afg
%?EDjWhZ=ic<9/I<^)N@7DchLC(Iq:`UN>W^XU's'jl6nVIX+*u7b*3a=LR)R'#%MsPEMSW63?Q]$CJQGB0tQ@+e0.H/"FM"$qmGW
%*f^SEZ-Wpe6=p7$L?30lJ1TJP!VMkGis.eH8r-ofW^VJPVIaQ0\0d#B<#Pb(`^:lY$>taR30To2m%]6h%QpVAYefJ?=E@rM3AJsP
%N5cFhb_]d!-jV?N[9EZU><Po&[:;-oO3Cr'aQucbGX+\QbsF2H4rIh%3]NN%PWCi2&C[<g]a"jjNY<`L']O9E4&B$%bo]O!iu9a3
%(T=nRf4P-]6>^[Q/>=a`21P]U4T7$p41'9l/rMA^LE%^Q8g:TifPs6cc[eEF#XTO(Aa5sc%Mc-k"apjpZ@Mt^5Asd:'W/eJIkg^_
%R:@EQF4,Ju0TJ?]atk:4-?c(uR?&"2WT/XYG7[W9$9q@S(KNB%UW(M@Z_tk15bY/l#!5Y[gBpL^(N\:iCqj>NVkJt"%sFTW>rCY^
%TFf/0'19s"OlaNsEf$/!l%'b#T^W_ih,;"*[9GSS-G<grB)fdi/7_9>)mZ4aJp+`BGA`1+,udGOS>R!H8K?/fiBN1K=*[]H4hbe#
%VMlX;=eq'bl\Ye%7(<d=,#XSt6spN?A2mF0&MtcODpR)J0ZT+']=NWY#,a.HL*brn6^7FQ!--r1^6d@BH2+#Rh3*4_.NfMfA<O69
%;lGmIiD/D';A]1@r9IU-:RM.=U]"tKoo6,9WUsbE?S\$B`f'S%iW?>49A7VmYR&HI3*5Q?BY.IV#(6teId$F1\_GHk];HR$lROa@
%QUpi3'AC!Re1U9j'9JY6TU3rn#RrI*f^&&`-4\^f(?pJ<(auU4),8;+Q-dM4nkc1Dq$pJtn)upIRLE5_V`Q;(dYM:B*l\kk4L<*8
%V!=,L-Hp.1)Udgr.geV++VP2Cq3Yqk\ASeN1cBQ-JR60`?a6BLkPt-a:5dI+@8s-WWH4Kghr:dg;D83E77XkeOJYI&&cSJ;'#@#r
%r.PP1U(AG1&QH]#cWT1O*);_.-L(m^id9$](L!>&dE&H0p7fNDZuG]J,_qc!8"<Ki:*51f*b)8oS_SOgF9(!9.,U;-+F\?bLNXDl
%fZj!1!BDSVQ?6Pdr]MGFB@tU;M-#7I`M=>jlqA-[2mMD^P7FM'FLMNg$hfH_/_p:MJoE9O+mV`j<4irM&=,_Np.W%#bHkV;W_No,
%!N>CK,->:Z#BmP1Nn(J<(4Me!TIlQarba59.Ci)$FGOem@#rC$JdCP&PCR;T6N7D9,ltfH^;k,/#9Mq"CofWOe=7@i:(/s,`gIJp
%2I_mj<:UaKD*Y_0IOVbZX_Z+U2mlh6'pWk'r$S*$[GT<d>4nO&$2p#4G^XruY4UDg<!e^(U^sf94]HV(07A.LPP_5A8ro-DimrXs
%o9K-1b@3_g886(DcEu-*F_@%7g&82;hp;"?pt6=kCHUYpF#nVr8<uhp:bG<3!_,V0-D1k<\+I"2e<Fh!mtt$\U*\Xa>`"INM]@Ei
%BWdIre(H`$1uK?C`TSE1RoAn0+E6EPA0r=[e%tmh7:hT(5b(gA@uXfqhMk*<&?YRJ(98sPR61d!IqRYJna.SS]=SP=9U:SWT9>"`
%]#Ak@]5iTNcC`%K#[/^aXAlJrD95^9Jk%9uW[gD9_*'WYMn&Tq:,i"@P#8\E9j35J@+Wb)49LXc%6D!S+SDQR4j'*hUsMMh65MA8
%d0==O#2Y?0T7]]NkASGT?6TR,@X/2EF?0KX762M\*%"\<H)\MGqJ-X%O_Umj6$T%j@>\)CS^5450m\8HoQh6j8u=.bB"stMLc"Vj
%F?CC=KqO5cFh1QE&!36>LI$gaQ%(IXmfi9r_k2mVAV_YZ9B85Mes=?n/"Ho,M!/!&]^6CW.'5'^*$Ra&"GJ8`S_mE\n+_aVKui/Q
%a*j[l.KN[uN]^9Nb%!:0Kj2&$Ck:k8H?o(G,0QkTr=TaAr,H<]`dF/\(J1t_)i;elag-)qUC.iSYtGj$V7Q8E-FVAnDl1^;Gdd,p
%8rN7`l83r4\)>4P]Ip<,]9g;Q$VUXpLMW>OCGfsu*14N2H,-t+W2`3'/jC;S,na7TWU3a%$)J<4MddPu(c+gAXHC!rrQurL;.13e
%6d,(IW6>e,8*RZ@Ya^e($YAf$F-fN&(08uF746#GHrH7r_Q=*f)CV'QYiIKb#<.Jrcm$rL?dMbBjjB0EH9nF?ob5/cETg[JI[<gC
%+><#\r%-;R)"IflLd"D%*jUV*7/R@L5oF^jR,qsH#in/\-^.g'5`"C*p_Jbn%PKt?)k<l:2Rcpr`d4WrQ:tPX^bg:f'cthcEf`9:
%(TeHYYmZd=pPN?*KL$"[^\6(N'o9UmUA8+K0=2o#]s<V=iU0=:!a\_p!%&3hQe$KqH84ST*s\gGffE\$:i)IE1/Pc@Z'YN5"Dp.]
%>10+8VLGW-AoJRt6)PX%$5fnO%jp`"?k!]T00tEL=,)]<K7iX(lPdl/h$Q991KeioQIGs-9]Chr7d"NJ.7kH[s"gR(Q;_(>h<!D)
%$'^p"1qUNN@;@<PL5]FT*Z;iung%84_kO`dafW1`bn@&73?iM:OAhTZ8O?-'c,J\eUNcl4C`YV-OrHs_/>U+WlJflGMQHuP`U.0G
%WU5n%as#q$$]Z"]d4EF<,A*_?84sOI_;[%0*`m%H4No.5etV(/H1iE9+$50-,&#NFBaK`h2%$o#M]bMNL.02.06o0KjZ@lZkt2E]
%jJ[6#DUii8C:Zq^in6Eg5*@;%hoX=)M*]89=*T`G:$sC*GEcpSUI717`*i2$@Z&g>4P80NBIn7rnOoMFZ[1DbZ#c&>(<'E@3D7t\
%C!7,n&3hqF%q?k?a9a?;#pRFs)TW3ta9`3p#m0>6+E%E)B9Y?0j_2-W2+OIsd<&Vm/7u])k*SD19m4ZJ*$$b%m!U'>I92U/?NkI[
%-J;bnZ[5G%ZCn-!P@=j$'Y17gSki1Eq^_4S2eQ>5%fe9*4Ci8Xa6#nW=[MoY=M9[OP&*_M9La^!gVd\\Z4Q'Sr'%Aedb7:4Xef0W
%fb8q&8q8HMU*Qdqfn@\ZYZMG%dDY*.oEMu9<`&";<AG5K,4Sq&BGjG)6R.E`O?G"e/Dl?e_OjL3#JEkmQEurtd%T)Z1n+VFn=3;Q
%aSo5uET0m3=sGOl<QT%ZJ2SE\!G.-;(,BC*aYM7OV:\_0,-m[?].pQ.rJAe_ejpM%#u&'9"9oIe5#b,dV9g"rmVC4q4:;@*);gXX
%#RfaT+$[UVPB:&f_psoP*O/N-8@L&mPj<if:V;`<bVN0%qhnD_"o?PD2+V@g^Z\/#.tNMC3qf;j6SE9=S)lQhO-oufbS2(ki!>p;
%j<oE9#RN^Z+qK]YVW8A#HS?Cl=ZC\Ej"QsUI24_5>g=SK`ME[2/u^oB`=7@%jj=1=I(+>WJVYa/q.XZ9VZC=J"c:;%Bu%_Y-XstN
%Bi_)@:%00<On,5NR1aMM4m=T1Ft6$MA]Zf(`^FRil.bA5$`Q8U_>u2m^qpEE;<X%uWe.,UNb\-QN%IM2Kbh2#aD=4XPlL;lG5%+-
%^6_PA'<e[1h(S)^jQC!-hrRhZpA',3Xb#9pk<&ZZc_%_\.eim!IZOg6\=.'Q(]]K7.60-r5XY^YGQ8Kk+JJoc/te9$+KgqB9IV?6
%&i210GRe4S3PgdQMMR`&i[Woj"*(Htl&7-Q#A>s5=NjVo$<hR'747&lC*j>G[mUi9>s:9.D8>fOW`t!s;b?*C\"0)Hr)A,"aCm/K
%-*.85W<hdZ%^r.W@h)F!:@p]Wj!73!K_<A'QZP7ja:\f+nm^iAr:iAsOJYKu;_CO,a<qY?$#s*/>Sj&B\r/m[P8s",#;GCYB2>dC
%0(deQ:2Y/VPEklRq<gae-(XJbG#,>rrZU9heN6B^K)!Pbkh++dd7rg;)*7o5<=o6e8?]W[+E<DGm8SamNt%npD7#O!.s&N"8NXNF
%,II^eb&'DU2PIK.m4+49<d1c;TAR7O"Z.I$'e/3ic6j)b>3#ejRE_QcPLV:Pd:Vapi)uD1Vq0>[ejXBr4/0hJ1`hJsM'1+T'R/kC
%/1m?=*/6ReT8ue#-XHV`&@YoslKH]pA,qu8^o,'l"Zkk@;K)k6Df)iAf%`bO1s+q=E"#\JU_dY<l,fW-B74rF<LZ.$;mgI'@:33;
%@Hh'k'/E=?mF1d`f=_b9i?!`mA</l-=`RsZ9c#2E@^a7nJrB^@oXkd'S(!-RJ3J:BHZEDW4mLX_(-8eGKiY4ng1K7/%6TnnOp7_t
%M:2cg;d/N)J+@Tm_H4P%isP-Ii\+^o`BUR4pd-0J4X1_8%c?a=:DU8W&IVNe:kD``E=>ginN>&?1[>#KrVBN>X8sFtZ%!3^&@T+M
%B]Zg2O&HV814Z4pHhPeqT\LM'[/meiHX=Z_@%K:O,`;4$FZmC$n*jP\KFd]/B?l,ur-"U&?]hVJBY!\tN7SM[OgsiP@DJ')Eo[DR
%Pq#cubG^J-oLn;X&/TFi$nfLiIT&Af\Efg(OHU'e$@jA+Y0mNBD.tV>pR>"'ib,*0-2#V&>m0-M$1?R`]5pnY2b.S1!(uuFE2W&F
%b$KQRHSl&d@S]n&.5"A8nMfL&4TH:FT63./oi"^P%\eE&o%KkN:AkT"5JquscS.TpmSSV7e1me[ruQ;"rMcP>WUc97VUY.nUQ,@u
%CQI.0V2d!Ir:d/-l;&GOPWG\k0r9m2I\n/Fe!)njeFDFk%];O63)f+0;TG"_h#>g^:8q_q*WJ"^aQ6Bb/.M<H/*T;CI8'BupSJ.S
%:M-l.cVl$&G'ZEF`JRU9n=1_;KM8/:#FB[%3hU&!&(jOFBaEc3;jBSY4diH0RB.+/7-8dPjCp?m1.BON1\dqtG(QNjO*u?]r=fsc
%Ll=ZrP6')MIo&a'jud:uLk\&7abffsAJe*(+fU6,W&!O;?=a"DO)L#%c.N25q;Z%3<cpHW^poTQ+&.oGHs5OWC%C>J33gE-mtt&#
%no5p<&!M-IT#\deA.ogdI!L%YO_8c0>),MC:OX@_ONR3`bk#P*4J-YX=Ch5<=_H/c4rsV28!2b/B=V]eEYb`R-FPlMUNf\MGY1,B
%<THTuAMuqh+Cik@PHsGZZ\RlaEkc[N>pg0E"%EY\7rb%@*BHNJJ9GJ_VaPuU3lB4j5K2;K$ZS@?K#QZQ92FVS(R`lX8gseqQaqP?
%TdsfiaA3h]9B2AakENY!?'iX5RXT>s9e&:kg>\OUD9d2BIY(-tBmM"_n@BYAeJfnJ5Io5ScgL.JE[RH5UB_QX5>o,f5u>ZZEP=OM
%BD$ON=rmfQqH7N%iaGLNHsGZmKeK'[kjlpUQd$V>AF\h4Y_sMZ&o"L;NY_=b(6qX&.K!%;lu>bdilBsOK3co$8aUt%WlV;9c1,GY
%R>FFGo0^YU-]Df_XF33>!FEi6=o)m!^aqZq_GWGJPg[@AZj,mUl3>R-aGr8ZmMLJ1.Mi3/rn(0?o))AI5"Q3M5LS>\e&jS>=LS"O
%fb:f:H@?"?>JbEL`0mae]N0<,rm:+64>:1U.1/>W^cG=PU\5fO\tY)F(0W8q;'2(`=!98/_cCl7"\0\ZeTl"!*5'We>Qe+FW4(Yo
%e4)3;a\AGtB@p>sV,"<qjBET("cBMt+8qdPR^Ga'A`i&R]lqc(J3%%!s7;:Q%D&Gem,l^MX^\-\NaU8#jlbD+I!`W;ql3t_k]9QL
%[4CoRf_dbhenT*rT;u]9DD$\2G-c5CBh,;9g]A2^Ra&(K9^/9L/N9FCQ-aQpgL+U6S+tG2fnekSXLEUuU<_kdNrWq^4C.6UYhJ'T
%.cg\BnAH.YJ`a5a_B"V'Gs$Ba5;S8WkM6RJ81_Y$riVL?(E!FobMD@Spa<s5rjhL`E=l3r0A7:5+q!2WE9a@YUJfjMGA:^QVdCN&
%qh_SK&_hV1X0c(K#+-mRODQE?N?,Ghc-oEFWg0=+ZbpO;S/)G/:'O[u+13WddNFR4(f$"3*ET7<QGlUa^,%+BUmRn^FrIf`@Pdl.
%JS!(M!kQP3e_mg^,HGsip.OfBY=pI4/::N/6Ll$XXCfuI<3rf.;(s6$):W;A=J&)>alms`dn'+VprqXU7B+c@+_41K`):f5?'X.-
%@FQ5n1Mk[4)9*:*]rM/SeN;#R"NEslU/K.>7%%*>cKQW^^M;8&Q$,'+q+\OFAS#rgQ@nBP[lP""S2%G2VH2L%MORdh;_.:;)1n_i
%I9!JXVKU`sfPqd6OCN%FAJ!$`1N$sI:!L2I))jG5VInUom)GGcc;_)aVMCT#?D?dcpV+\Z[k_Wi8Q?80aKqgaXPBA7N]D5^;f\lE
%Y=]<(YMqpJ2.[M?j@52n5%[r@;=La.fo3*!Iq:<u!'RC9Ydf"Gg-[k]X4.?3V3H_gLr+>^aeD6Mb2/[>,6MeJ1QA8ZQfDa:Wg-bB
%jXGo6dN8=N@6APW],FXNrB'qF@=>rDBnsrlAe?P=G<Ud5Wt^jlSZ>LCbb>?>$Jul9CK/2&)uO-T>\R7DElQV=AC8"-eL4]Q3A/_M
%.iQ7f_55?4WS%m7.T`$7m2fHpVq$@2H(:+G4,XWT*(59V6L7Jp-Y0OX?&^Aho)+AHlOLT<?F=bb:6*Y//*sWHQ*BB]?E<tJ"0V#!
%R_%haf)mK/^XdjH&=nk,5KG7$`e4q/chVhC\3L6?hkcoQ+gB=!iDTs\hW:ETYLFDJq`T["CR#fjHA>gX$tI@&6n[q)L0RYY\b@j6
%Cf]7+=&D&;L`]jSQiZ`s7Q=^Mk5XUtj>_$F>SC,XAPMonk';WDH'c.GX;B?6hqQr\c#DP"hReN>qnB$A:A91cZSEm)^4aJ8o;a=@
%))6HKf/qgSSaQ1E)$fU%L)Knae%OW&?LMf@GLO7^l!EiWosWb%KmpVb3u77bl!Eh,j8nAbfi]]G$+,'*#(B%lCAmVK"0(;=81:]E
%W`M!%[(@jDRC\rS)'"5$R73.59&JZ+E?*6TCS64/ZLGGs)L#ejB95iYjr(+I=ViYqr3"&)R;InBGe0BkKDQu*-HJQojMC,,1Q#qJ
%Ye&4sV,jahf2r!Pe>lGn[2G62lclXlE0"Dl3h*_+I[ehCVlmA*lYPiIS%?oA&lf,DAa2LlF(Ipc1@2T+s&Q9`RIVcJP';V(<efR$
%<VVm-NKtu>a)7?=6?_:)[KK21^U#.q2skVm+%rsG`HdW[/<ahS[i/*M`-$-I@UQ_!IXeV_04<b2#&&(Gr*[3<mVICkA;f[=2&q%X
%<MkeC]6:i+2[a]>E%_Xq?`&jMWT.RTGaUU!VN."Bj(7M#R6"Yl[S@JIZ7pDD9cZdVm)TbtGfJHi1hfHo-SE*NAGV1d26(YQ5TK5<
%'3UJ;9Tr0*M^Z5bT4B.h3o'HT'A:9Cn%VhlfE;l<9)Ba4%.m>VUM-0pJ%pcUELMICIL*u.#,_8@*3Z?V:Bffb$cko^^6Dpes6#'q
%3:=7_"%C7A4f;GL(B0iBX@j52dBTWF_GaCX$$p?$[M?@AcV;Zk,1G_PM?-I=%^-11>*7d+S("/JGH^[8W*aB-doOuEc<AU@KRdUk
%"6D([;>GZ*5.I+OP:5=^._uZ'l(Ju[1I`^M%2YM8a"$EdU]()7[PGi;hKuDJ<isus/4ssEZl55_=**`+H6Xt@g-8Z'V+_6AcYVdB
%=Ll$^CrSm_[mu8kEP]YXMHUg)\c-f%6>5Ub,gR<DDG4;/gdGo`=U!9AW!MFsmlrfmq>S+LFG=UZ%uY(3!Rm9\e!,7SKklX,:n"9B
%PK\"Z*k\64)+\[lg1bleBsQ1K9Y(]jWUb-dcTk2s^78u7P8V\o3SDII?VHeB0djc73mgnSR[sMOHFrX8[sKm<TBQ[OHcHGi-c#2k
%+h-\BnG@4HD0c82%&DqU"SbqUhA<%O'or#u%/4$e:/?C9"lrWJr\'#uT9G8pkX#3UYflQ=f^#(2^MbVYH%\(n-hHdG7[u?R;ELto
%W`QJC`iS#f]TD(?-nk?m]@&;@g=/]bP/)+YQ"m2Z+J_Wee_laX%(f]@@4NfcUE?&*<m#I"XfMAjWR2T"JQh5O*t\.L9IlD[Hrkq]
%mPI^$<LDDIj>Ah&gI+5EIcO,WDbdIt'Ro`P,_$]F?K-5`,M,U']IPPG$3=Cd9FbPU[C2`OCIf/k33nD,n@io$&p-$LD]%WmD`0>L
%feFiGo[lQ(g9JtdZ'[f`^\>8b(+199`;V#(*M#k?g))3*p_@TaK>!G)$aE(n40B2GTG,6SY$iQ6$SrXk+G-F@7s)aJSPE'ZL(f_[
%6UKDb%-'ZCA$8_hZFiD[R`.m?OrPTgaKY-f$>[0\hYhVB>)hBNofo<Ghpi?<-Z7fHH'd<^fVt,Ga-)E5ff:?;7C2MMZ`Wac1Ngja
%`X0id3t2ZC'*jR\+#h)@lR^3m'^d-i?TX'llLhXp-(6F7KW3ANZOY!oBH(mA#DKg9e`uThZZ3?kY"O6(Ju@WE@elL>0PM%^b(-/Z
%4iPJ6W@f&8WAFnfm\XF8it\GmAD%ffL+0HKh1m]G/6lY#m"Nk.4F6S4Z2J9V<W=QOY65Fr8;HYsK[m[ke]Z?CV3WRb@l%jf@6;Q9
%&XFtp=$nbKEJS-><i3]tmrB8q8hCB+Ud$Dae^@beM_1&>H<5_+X+,mh1TV,V]6;iNa;J.&]@/fU)/(ELPr`!;C7)t!OXb`[_ZE0-
%L0;C;_fE<9Xpej"WH$%SG;ZBO$;tn\U@hSEMU;N"QbPUfdE\E5f<Zmtom<k3Si,h8=bJ@AbG][`*d:+VX'B3[s53!Y)>=59dmT/h
%I(pqjB4O]+[+F&+R(>gY@g>1>rZoAnM<jr^`mKnG*ul-09>\5_ki@tO1=Ao%X_uR$-c6WlBkL%"4g[!nn_enQF>?NU1FuTg=WHe&
%i*@e#jiS-9b.)34':RHnYMO)#e>r96$p.?cNg?*.=]:?H@1&kOD9C8'*,Retg5-0g"GG>WC<GSa_oNI_EL/Bt7[?@<>q'E4ee9]\
%^K2[RAr\rHb`Qa2/u!.mI?FcS<;'+&etm3/4<0j+TkUs3&Q=0dM<E_C>FL4M96";,#pT2WGnTuBU@g7dXYd!f4&/"6H6qT-X'=t`
%fuD+Uh::HQW?IJu*5h#>S;3inoI8)G@;p`+$%J`5khcf4o'[Tf_J6MfgiN5.U7#^0fhM=Te1hHuQ0H2TV_NdOa"q]iJs3+jA00..
%fKA2b7q)66b/>-oc_::(\24]ATq"<!nt&Ln$%)s=KPpcb+%2OE@6H4N3dh"i33UA@mDUopk8(s^-7$08RNa2u,\8q?3/u4n0.P[4
%3obZ$cSR]C^-u[.i01CB;&YX1O\O\Rc,SKnRo'.*e3'3oo5#&&RP(W&j09,3R&lJfR9&C_T=iO#f?&rM#NNP`<>j)J:-BG<DoPI6
%)#$o#FXFnVO_"r"&'!+O1%epJ4W%*.`oJbpe:TJ.*XmHP2OGj8H%[q=/rW@m*Kb&!V@JPVEaZ7Ejn_a7Ju;csVaU[%UB`AEo])L,
%aaLm%##fj7*q+dCom;Y^]2Xcf%g_CH"K.%Tro[6:/r&HZ&HTYaN6<=KV`*=YYo0Dsh#1E;W=:dX2VdpJ^#N_DAVb[S;^3p4aJMG^
%e;0S4EDn*"C;g)6NOXhtM-J1<M0n.I3-Bi>\A_$q-N7k-go#n^I5U)kBJT=Q)lcOKNegB$[r[n)fd)8q:1Ro024kk1hq2$H[=??=
%VJPVnUY4;(Ypo:U2p<d>1<4af]bVt=3CoI$(`NOK+BR245O7BP&rs.k\,40^].X9;NTkUnL+&Rsg[<8%,fW@BA5R!Z7.?02Nod6(
%!Q$5%(g:&a'6^k2#KrnNh#Df_/6MS;j]6T3Z'f#V0Rj\cC/OXPW^`h$rg)CjG;[+P%!udA+(&rO4-hcjV:DN!V<BD/[J.PXG`&""
%IXlbuEg3*(E]kMpeAoshV2nan;,Qhc#(73f\."k&@q"5*6,W5T;-DDY1!urkph80j@An@qq:d0b!m1"$c*>J9Q=4dQL[)3:dT`UF
%qaPGF+MjK<@n#RKVLb)GX5uHZ7a\sg]VfD-C,K5b;>'>]@qJi0Eg@\bXOLMbUKXWc@>8#mV6F.WX(TPtP:1`YK*nZ/LHdSr&+I&O
%fZ_DC=in8o;QX9K5WN8Pe@FiQ#s1\<.9ZGKL=M7(grhCWEk0W$r0:u$ZKPSR.YHlF*1CR='b+XEpsS9mMudOpPNl;PV#%dU!md>.
%X";,DMVY7C&_8F5R4*RDGP,>Fd\E*T+qeH"P.YC0M=Ii]-HCNh`fV[GBdChD+Zt`Pq/$?6,c;/O1V!J*/f#`@Ri!*dP=_Gc'@AVu
%YpcG?LdfFY>)l0*8g\E5rl:aD_5dMd\!k=2r.a`9@o:69j@j)8ME6_c)(u(F$Q>%dN1.b\g`QMRNCE*4=l5->PUq_K5#d":YpeY:
%9/DS_24:toR&oCo5K50O/E([sVTBBuha77l?JK*&-8';3I\PY=lG@NT?<Q'3j,tT6C(@,hEQsS$WD@-=?A=js:Wpc,XBSK@3fZ<S
%_\:k(4Di6iVE><4g1,&*<DEn/ZK,lpRu'A#]W0Qn!(n11/M?VOI6@1b]^t;.Y8VN/@J:83*I-D<A?j4Ab4X43k;PK)MqhW@$dXBN
%mPi>9a&+d:lu#"g<\*>A=a8?SHG-luYFX*1TA.P1\L$)U(dtqs^L:dXqM-:4e3gm(>7FV.<>>:jQc=1iDSPou]B;'+8*ur!W!1-/
%Z<%";7c0:OAj6;SKUllT$Qor!JJ5j><N[7j8/>*DqtM@Y8+:gHi\-)VZ=FoWXhgBj/DF01K0C^Q)glT>eM(iHn\']X<:T?'IbTEL
%hr2&Z@4H;E\PHRs>kq1*H&0B=Xd#M8#9aK_&N5KV/l"lF=JP'B+KS'"G/OT*E-e(Hc[LK!_61QQ(ME(B/E/sphi,d:44tu-;9M0m
%p,W!S3o@)0jkLVDTErQ?bp?O+RoN)+5K>t_5!\=5B*;'0(P(eGJ/Z0&e//A=qurbU.%o-E!4>8s[=84U4US.Z$UC7[5i#cIlAbq'
%6%%:=$C+)3<IY1R3YLe_OHhkiY1-f%/9N4LWP:b'l:<[,Ig'C`qq(VuiOY3,K)bh]+osqTb;Q'(C+?7NdK`FS%BQtuaT&oeVAK:6
%?[[=`:_*D*!(]"t4it3<BsgmfYZJuO,/5O^6.;Qt7mF1PlW")\s,n:&f<9g1i11ACV%*]n"CW7HjmgHup]6(+ISFPJn3]OmmrNi[
%jpZs?mejg$F%`VDd]jmd%(/nQT?KKu[8-].S#t5'p'DGQ)^C>6fpc%=le#!5VSf3+Y$*Ja7O)1Le.Y]$iEcr^ZpIR$(qm0aAH?G(
%U3;j/Qdhd@n_6HhRnq1'1\C3/[]-3YV]!c\?oPBmoUR5DopN\>?eO*6QG"@GO5hd6>4)1:4^`cS'h)2-+W@m>6\,`RA*X)GDN72Y
%Mu-lUB<k(=FnYPm_!a#9jK30n1c]B"d;W*&8_(Y+=?_\\lB$RXo]/n/IbkaPXb+r2/LcEkNuV9!Vnc/2ioe,5r;[XNeM`^%gX/M$
%E+Aqulc)(*R&VR#\YQ492KE3Y*Z%=p8N\]p*Xjd4m+:R@7WqsRK>t/8S[J3]Pmf+?W&),PmYu6Q>a+Ptd6mNnLNW\bmp>YH.Va`M
%:qLV=1[^5ao<?Ge-^ep+;*$QPhR8m]S*e[NfIZ2X(^nXt-j'.J6mHM9c!7;9ac]%[FWZL*Q,7:4eIC^lCgHVhCdE=-7V.GVVH\Y5
%1r=:D]5jrL(L8tE?0H,]*h^!5o/c8bmP&IbULrWFW/JT6)!tp;CGisUSf#eE2_/GVOt;t;Yc?j(FQG!S3[T[*JMKe42(rf]L?8o7
%_jgqh,IuHmC$Oj=_J65&*=!gI-K,Hunn"q0\u^,0:q#4pAF8l#N*@MgOXN:(DEKg7e_Pjie;B]E7ChIBT6@A6Y-c*q9"!(_RYbeD
%-o3kki@)p*[D0T0;/4c$f(dcD.O.l?S"LBOmM[o2]o?D8F;h^GY]ek0c_K8]]clQQp/CBPJti+l.fr&EUDcr3NM2n9pd.qYFpM_j
%05=c`PU+]!*CbQVSHK\l8ug$_Vqlm2)c<S96gak]<a!jF_f.K`YtZNi0J'JT:rn>Cl`O]2ks@s(6Vn(kM,Nm'!X\.q?G5oGf6;A\
%c+eaPprYcW&%q]:62nruj#..-dUa\;f+`kpWn't`l=&3+<*SlXe*D@:g-Kb1e$kD(NT<g_OgbjqAucN/0Itim&H2t:.f@ajEC>YS
%G4)<XBY`W9EpkV15lLS07El%J[/2cIP<eU%Q3=)Gc6U7,<FW\Y>T7Xr:V6R_[bB"&A^nUlTsU(5*S/r0*,s_1'V&0_-"SO9<gVZd
%Yu@b3A:=nB!n.R%#GP1$kr=R#0>]VH#D.i%gHga8pK(1%g"gs'X<N(g8gd7OURdE>O'XZ=md;qGe?,8]JV[^3\a!b2%Ru%+EO*Qo
%Ghi[ge)Y\I^S:"diBo!SIKeM10)X1s2quthY6@n_H5VRufJ0^+/RaiVGk!FJc'ngr%OlD8ct+k1.h1F-ki)=BGiq*ZW&:;A6ZCJb
%^f"$>;+qPgJ<c7N!K#lt00314\a<Q<Rb4e)[LW-eU>.Y:#Ekj&m\gT&=hT(PI2ZMsOgQ45g!79VZQ1<!Xs+4;lHM(@g:KDVj]D+u
%qS".T+K$-g4AKAEi$\g;JIkA#ek2boN70DoAZOmi<[ga\W+-s@Gt;SQ/hm0:0.L$a<s^M8,sjGi3`Kp;GA=m>.?fZci+S'pN[TYb
%&VYcT;L!<P)2Jm\O-R[f4\!@pV+/O2DcPNi'eL=TB6D8n\RN.s;2QIh9M>CpUX7'/PpK?IZHKNO[1$MPWH&/G_@eZZUu,VfeXg42
%X2(h?:NOc,I3A<\]>?;P-$Nb=P]\Nr-<[9h[<*.)5Nnmt]T5>(!Y'bF%-F[^48kQTR_Wp,!I<Ld'=L@06EPERM%CeEAh2UaA&#(P
%?BXM)>%S`0:dZFG+qgta"/(Jps+9?.TWIC.HlOk&bn7:Qljb!$>acV.H;SN38\-m`L8E'*KbFjIYK6J7.@]>$F]rKdKoMdiN272O
%3tu*$XAU(I$91>!fL*G_.CLBUCn/c@;S@oR->?Nk`Y/P1?Md$0=/sk[WnV2E[RL\9*479Z[:JlWJ`:XiIdGVcHV.SnH%*PnrRlCl
%:UuNt"N8&R&;RW_JNX9MTlfu!Ecf2*cI?bT!"[I@er+0FLKf4F]9'L$f<Q1"-$9bn@S`/Cep#R&mag,/8W08q,*A,S@la0*h"fC;
%OCk!DAo$Y4;_,gCfaETNi\Ibr%*>GY<("X04Cg)EBe6[%dIB0L*&2(I/tfgaN$*-h;/_[\UIpd9UIqm_["8KRR+@Jt@3h'OZq:CH
%6r?cjL,[;,-1!-;YPT&O2S4r`1>_mC4msh7pHq7qfqma["-J[CIn;I:=n&UG8H%-o=s?e&C?an8r]l00[FR%ONeQ2PC:p]tqp[U?
%\m.9blPQ!j;AU66!a)sIfGI5L">rnH,N0*$'nY&S+M"2?LPdh>P@.N\ao[?rfY^Q\dfbX[<,,$3TIag>^tAp[N2gfZBb,mM!<&cm
%3u^ZOXDKem:W)<K#"JjE<!<mE7krpY?Gu]<26cRMfXu$36)$4"V"0fPGheL3KQ1%.09rREN@Y1MA-_t+$;#uV<iZ`U2qE)GGuh*X
%eRbsiX)fa^=7<Ur/XXK/jj@/?CFu)XcqYLfi2n:^l;1Fhf:&@?/NOF(ZNpc$Wi?=Y*3)eDUS+.."=UrJc\->@Mm+0YUS0XTV4olj
%mtC?$/*IpGb`<>+aDc\+)Ai)/^SBDn>;%%Ob:1mr"6u^WeY11lMg&?%:bRq]F-O,W9T:*5\14'GB_6YG:+kMW)eFWqlXjtn<3&B!
%PmZMJXKZk3S3:@Ri=\bK*]2e%cqC\[e`hb=n=jT/L@%h<>F1TZR")Ne+j6&h\*.Y/mo8c*:Ubn7-RUt>i?FUZ<X2^KJ!0NEUu:q@
%VUAd+FOp)*PF99*]*nT-po(V'dE&_>C/S7fXCosk):lrXmq(^#$`g[nj$b=@etV!!Sm(BeQp^/mNNm49>"d);VSmOq;#)K=*^n8Z
%W7:5eGng5mm=@i8BiH=\$YQ9%XP9M!<0Mb5IPgO:-uoP7.P^TcS%/mThFt_rgci?8F9=/m'g^^5;1<lH0`rQg1*+VdCcpU)nnER?
%h>5UNnGU4ara^N+he[19?*'RJAp0%f$aWY#Q#N_qaEmHP?p.cJI'^5cB09PSrVUbUZe6e\`IbP]4B;pOTq\oGn%ngOnn<+;ldE,a
%[=q(cZh74#L1W>FGA!A=e5"a_J+7i/F3TN$ns/m-;R!P#oXq*(h=:eacjkqo=6tuPmGRjXhtX^ki*FlW>;3>LMtmhJ@AaqZO5B]i
%X&%V=1VoKbF4qGa,MPAfhnK*^ffRJ4]cGmCZJ<Thc*baSQd(fHda``Ln@2Deh(#$_1GiIXD^YFQi9\WKgTPKqhliRG([_-SrD?;6
%aL<N_8_s?M\b>sc3sGsOh9(41s&t1R:OWH$jm<q8dJ<d_4'I#6A"@idQ93HPqgEY%<%+0<BCcqZam,>h=FW*p^KUCj^R9TJVO3E*
%cSjYJ4M4cJQ,62l<1,D0m9[#o<Fn1tS!?M$<[qI#b's$Ro;@Mkq9L("pZT^0*5L@llHY(nbuh#b^MJ5(daP8motAmeqs*d!`O;+;
%B=c\GD6*8p/#i_T$?fTk@HQpSOo8$Vat&bTEX7T)m]Fef/jt0=5.G'3posX?1V^Wsn6KJ=2=X(GYl2[i\7+Rd?g$%tQ9VKbV[pNR
%gl:#t(t+03lle")-gR>r\qX.kiEsl5M]>%?Q?O):bJV#$3F$o/S=0E0`+CR5nWfbD&SOWoIB[S8QhcX#)ZR2<Y4.U>cS$!H0kf8G
%D&Y2(]e[@-;-;1skND.Nd(AtYeaiH9?YMB/Nre+ODi//"PeSHTn0RLS3kKisV':P@1M?XDKVghe>0dZDU\2=]*=(KbK<s[+571io
%oT='_^3REc+un9FN\="An).&WcTB^"6ikX5o&1`k.Xs"^s7X)MB8IdM$<t8O`mC7@;Y,TEZk)ifm&3aX.0[6?h#,10eTYhp&2H(@
%3)SkrqSrE'ib#NBn]"\aHhX%2aY>;?$WccM_Rs6"^NRq8HK`JM(K89g(I:>CX7PYJfj[cXI:^H(JX7sb_>nFTVtJ<bj7WTDGc0B^
%S^"=f9ME-%rV+PSr9Y>Hg5i(ff0*-)6T6L?5&&7&0<E'PKi;RM=V*H[$VGNF^++KHAjfD7mZr(&UCtkS/Uf2oahD!e[_LQ?k5oI"
%SYI9.0>7=fra%=/[c8e$bL:Jd?bZA%S@$U'D#%(HrETieC@A<ToNrS&>jpq\1^!]4p4KKj`t>]OH4?:%Y+2W,X7u=s]3GY+/[Vu*
%%o-DSIar\n2(,HZTU+^jXboQKF7I_12YV1f76Ia'B][>Nd.H9:,2(iNqTd,%dH^O?i+Y7-ID#GnX*mm[nrCHO"O!)'fcgN;p@O(#
%*UhP)2r>ZpLW+l:qE6[A2QmfYb8G".(@&*1iY-+h4Y2!$/X.l;4:s.VTi=D!VOr6^\dQ/krMb!CD*1IWHQBg#<qt1K%kjM+GqVB%
%eY&<57i)>(2NR5Qqt]%ia(e5"4F7^2Gu)2P7)EB;GVV4!5m%,l>`4->bgW`,!X5gDAP2M=W]pTj\lCC7*1,5b,%&(e&qBppIUh3^
%l)o6;YZ].N.^.#T\/?i<*5$[p@^3FD0^%XPNTU.ANKl`bgO/?hGEaCYY>6mHg<T<41Lp%Dl*>a,@dd,VrVFO_T?KDIBQK6Kk1-U3
%mO!D:!)-JGQ0<>O\[jJaIkH6*J7d5p=Aeo(^\Z"po2Lpf>"?3YCV78SeR],6r68lI]X>_QD(Z$Jg<%B)!K4$&LW8o[9-E![Z.,fk
%&8MIh9Z,MIh;=;O<iH@JkCECsS\WVQ+HLXL8'8i1h80IZ`nsf'>20P&kaj*eFMCl@X-b^HH'FmsWjIY-Bcta^fjofAGAJI=kGtfJ
%,TP3rb%B4fUPW&kA*Ec$?Au%PJ7cA.K2oeaMLj5ABWBK:Z;0G;^ChsJoN'`RBI:Ec)uU=dkd%EfdjI..enY,J@p373aFG43GZTnU
%`g:SejeE\Q?gDO06pY9Of&KV;iVe5sg-r<oN1@o\Y*$k@=\6MUT'f?;Y"NuN=qtfd'4:l[;G4V6,;0eOamf.gbc:$hJRfu6<V^<c
%1m\>(lZ=L80be>8ee&()/g^"HIb^"h-Y`4!a@L*`-Z)Sd5eT:e*-H.k5-ZDqA$rGJ94u&c^[#,9\mEWC4?J$!$KoT%Qi-?5hnH0,
%2c]M`Rb<#"FTU$$c<:O6V=XQR>4JD:r+pFS3LGX4'ri=F0?u^nRallD5EHf)e\H4(FmblgFpD,SMiV>T`N9pAB2&+%krkXmnl5W7
%nd]GVq0]``nJR#[iJUfMgT)E?&^riERTXp4"r35kDq@q4-kA8o5+ULZbeL0E?T^GU?gYGj=0&$-^&.G5-.l@mH.6EFfrLr.LS"Hi
%i<;g!rfV[N/<]$8?"6SGDlS;5*^n<]LP',!!%8j/pr5C4<>lntQ3ETCjjO(ll,n^.gF>([*%A#d\#@g'9UAd3<,*<k1Po2\!58U7
%n*3L'Rm$W[:#$ZPR`7tqlLGlu#;e]VG.d_=AMKQ&^Pq=^r;m&S0,T%=/Nm@.)]3p)/Nmc:)LICI^6mI?857WmcbW93H4!b0G=pMk
%B[=/Z')!OWUt/t</]#Ku_n#^@7A7\?s.f:jX!d=Ho[6G("25ra*8TL7^>sA9L'1Z_K5?Q9<tAV:ho972fX-)RJ+4ru-Dn3FXVYmP
%TK%-l>qH9C7r<]bleA/L1dsQWE.JJ5%$oecGRjIS0Bc2<]mJ#met4AaA`r\NfmS/"!%,.Q%A^1-jn\1#^KPuR=3fV!G)QKn&&?g9
%rX7WIpklZPVDTS(ji\:<c)7b:]D?PFhN0_3n]eM'T1,t`QU\ibCc@YdcTcmurX_ndD/sa3r9s]bi*o18f*XQGp:[6'norIGf:1LV
%Ri.R(]!h*Aq:#1V7uP1VHZI,D4MPQPBU[&!7mZ@eKU]*tTheCXc_aM(\(rlu2;,RV9ZmZ+T9j'rG4FmbB+KoS>3DCKfY)<7i/V*s
%h=4hoCkB1pE:o)M?#UB^^H-[6LdsCk)'rge[^]5]D[4heJ0V66^#T$[2hgbUq>>X!mJ@]OrGT*Q4t_>c(M@)m<H.VTPb#[P4Ea5U
%Gr<(1O/cOiGq,9E4UFlCkboT[\;M;=Rq\Kh&m@a[7^lYS'o,[B%-5B:Yg\!nD)<+XH@f[d('0eSja#e#)fFU&Sm3\_c^T5!,^L?R
%5K+<Q46opj[)L]N\4JG^r,bJ.b"Z+C(rg!b0`T?XMe1IKj2Cu/q=[[tbtrBXjmeC>\Yq/7WA!*\@$+rdS#,52O)H[l9:b/L1f[6?
%00`Q+/s'+(b[Reac*+(kbcBaYLP'bJKY8lh-Y.bUqXDcl4J)RXpguD;q!!,<']\)p7Rt%Pc@g&MWj?;8T(A]JL!o:tF`]j$;!E'j
%d8uC#"N;b3YNRp[l9(V1Zqmir685;>Wbrj_40@,u<F7n9EI,@0nno?3rS[UAB7Dq69.2Jf^fYBYS'=C2!ua`'*>UX`S/snCeu/Dg
%TW.8ZPg=\H_:FCdZf'rg@hi9:M^qXlC-<>2092Ye3\$^`I.A$'dPH5Sh<>&8LZQM"Pulir'ClXbbBd!djgg#2s+[Urn]0$l!RU4V
%-cj&Ipc-!s=C4-dj`9h0,+$jlQ?M[YIsuiqlKR](".4Cr$b_1&j\SaJU5$9\)d%t40t0>qlVkapX33<BW.qqg4o(!BZWStj^kE$-
%@BTM>>TdW:]sram(\=I1'$jb?FSTFA%t]>#$2D+jY?2%dr^u/2k,R<0W/X^3W;2.Xc.+Ic%KP3l]ltLP=hp>UYFB=YbbruC7mE:H
%11*SMieN5+Ms"(O3\Qg,?c/W@Zk="-,h,,uV&@-5a)%omUTGL$\b1D%s!n%LNR`'0ZKI9%!B8d=^nHbNJ@G6-i9]g<en7VJc*bNY
%#3c3dQZ&#D\nRE)*5dL$caRK[GI`c-TF,1)]iY>XoCi"Ak1W9LJ7a>&XZD/sV:1K^rbC$%#=(r0q52tKhJINSHU`!emda<6,0n0m
%qn2dfW[44$Cc:*BYAij]mNH$XaJZ0/hTL-B?5F#8R>7DRp%SBbr=(R;=LnEtL@Pd$D.d-q'[p:hTm<k_.@08<io]!^mjkXR'mFlm
%8JiC2Y(5<QB/Y6%01Dj@T6<?[ZuI/9*(PQi]=BldCcsC5dh>BYr_e6ICk(/Bj41[ucXp_LPu9cuG]L1J>[.!-[btJ>Ib4p4m[RRs
%=T<2N>t@?2oCZq=48?2QffSI=GIS,q]iGK:dY@$g^R$V8W]K!6F`Z6jGL)iXhU3b_;mRi@0+!#25T3oN`em"j7"I0@J]?&c]",7u
%Gmm[Agp%n`=FTUcrt-<HPl6>k:IMAN6MnmuN.CfMp%I:U.!g[Aob5[,?9P.@Xk6*rB&\*OSJQcmma:&-.#l@_ld<UK]pSQ.S/:eC
%=02U&$LPo,kZnGo\E5EFTrjishj[F!%ql/?e^tqiHEm1@&$\:jm%Ypi_3n@)p#>=K]m%13?@(al0AF!(Zla[pI!F;QRCubla>hik
%!96Z*4*m:OnS0_Kr@"f`9<B`jMqB*jKgQ/3<Bg=Gp?T#TM:0$!Dca;a]5,7+0?8BY[f0H)(3[AA5brUb\:4!kVi5'oPh%ddEkLfk
%eeX:B@7T2CembksrVdC4)V#s6qte*TrG;9]nAU<@W&ptjD14JV@nleLPd=cH-uPW[^F)+X&#LXAq3s0RX#QGPBa"68V]2\0a1UL<
%V=iiAk:EW/;[V$uAR_Q6arAo*ojKPhm!q>`I'_0i^aoO9bW\9Pp(=oM'aoA,SRG^<*."90ke#C`Yi\j2pb@PN.W6@348Z)Hi,X?T
%?_Ep<!R"AB]!f>b>MmT<GRuuB9do5]d)nXG&7G67;8=a-XmF<uT=j4Ea0/tr9sehFrlDi(]KZ'CpZ<Qkl2DCQCMPAJHh7_mH2Q05
%(:Nf_Dl^C)19]ofB'4E'6Mp^o=BEuFXnge_BnNLp?G3eNEm*/#0l!)J)I&8\`soe0<Hlm8q/#jNqYI=P/E5%s4IKRNp7Hd_/6[4f
%mIGLW1JO=-'LM3"8WJnbmYg,Cr2ZL`&S6[2qXRMQ3@K2LFuIrYjHmHHH2[O^88@#_*k3%0FZo%rRr8M8\?gp6=Bg6[r]+)[#M\@l
%m9jRM[R`L-5r@%m5aGXjnHY+N&dZ1b$Jf%k^$<M)IJ`;&Gau0&eLf'aL[R0+F713$][=Io5Ooab@K^uhbXU4o#9W?nP>2Qif6VCR
%=qB1"3hIqR`fFbdDGDOHR,hU@E-%>qig(oB#;id$Bg2kO7KGRA-#XljlYB^a7pd'BDrOC">WQ3=_Ij+&F\t<YHN3M`/NA+5p1'F9
%/+VukBrCan9BQAO3hDMdKK'g@1s>`h\jrFR*#4C$8im0YZ1J#Ug#>)\W].7jmIWMA>>cTYC0/CPflK:gbJ?._#Q!"51;@uL:]'W@
%aZ=\JYX@:"a78f4Q^clV@H:MY;MI&(o=&q:0fG8^Vl[RH,[@p6^AcS=ggL_b<L-:N2SA[Elk&6AMH@RFIhn6qT\1+h`-%1D.'%g=
%gOK#C7"sh,c@eZ865,]0lh,lsksP)W21/L**\8,A__BnmV==0V`>^LT(-eV7^^>RthX#agc6U?uDXhcan@1/Ig0B!4?78rtVS>&K
%=0ZPqYNL6Qhi..k"knIuZ*=#>3VSMWqI0L0.UO";JSV]c=[-5Ic[i*j=c`i'C<pQ=TP*SkV^n,"Ypf&BAA>87!bkqGWTd/N!;c$Z
%`F]uU@Q"22X*\KcktnFJ'c_U+W$eGbASbT7b]m;>FWOLk].)V5:Gr*u!J^OSKeupi_O(/Ih0esCrX"8]V1%DT?tXsrn7p9^%R:?u
%U*3B]%X)I0PXOt"n<:&Vg\WW6Xd/X!:15skmLatGrUOe5&WX2X*T\9KW&\PMo3u11f#kl`R3J%mpLM"B2t$h@bqB&K*MW[9-uFK<
%^A?t`j,s59nEH'^riQQUHXWR%n<LuS5VN.U,EDFja4gc^J;-L=g28Au1Kc8k,""j"@C4q(Mb5k\X8c2!SY%aUp-hc5TIb1a$EL/D
%48j`;U2u8gb^.]\p="2mg7a]3ok*Vn:2]b5XMsDGK:mI0goOcJ@2/?qi*&u9cU6?uk-2(2;7[UQg@(cb\!?/q&MSKX&[e?<fSjk<
%M^ZVA7-7ZM)\X=&EdqFa[9P6#8]lap*"I=UlA<@;;3G2:_OGQ3V9%Z%P^Ck'_!p&eohp<ieiUE3'roi#\YrcL44F]DoK95)Eg7QD
%QV5Qt64Op"!,<)s9=pdjVgRYWFBgoO<C9gU-g$Ks)i\U/`3PK3nBhfoiGCD).d+2V(i,PK(KPStk]QhTmSKaFldRQW!=ha)Q5U>P
%k8>D/R[(mKj-ZS5E>/289JA9,jAA"?Q/a\$_[rS)fuJWK#'H9Qc"@%"'%Blq6]YNM$N%q!rmA]Gl]',"%hj^s7[Mt+S\,h"_Lq>?
%g)b^A-mlZC^$-%l=!Yp07d!@3mXLm*'],nBlD9DNr@/-SgK:K*hJhm+Lr/`O@#gFSqg]\a7HSYf#;R->G"td65I$Y"\cSYQI+VgU
%N[jU59&F-3f>o/apFM-=@lcJPKXh'upNO;rl&Rqr19bL+!sY8]lfQ%PU,7l>R5$`aO*-KC'PKt57F&s:OBtt&JddXQ#<A!UA)u:^
%U]0+arNBXB:PW@[U0Z$NL/d#EL-L_rYbjh[d,Ko@nXMK,l=I)bm%609hdjE/o.kDce!77;>bA$aVit6(2<L+Fs3cRDf??@P<:Q<Q
%[&`o.k-V1,U;oW&!Z=bcN[SmC/Z_oAY\.F4TVi>)+",A;pH*ej<4kJi87d,eXqVk]_kfS)NQNQ1B&`W4X\9T5[P9:0jfBYeE*]O<
%2<sgiND+I\k5kAiG3QQTKN+[8(;ZdmYSb^,\#rYjO(Q")!eHZB@S.8ZV.TZ_D"!*CUJ^T2FKW!P[<g8uorC&/K3F#LL*c.@#H1YS
%:(#WZ4^3NRCLiEd-B:c]`X[N1[(1Fhj$[o^0aC''[A2"rl591tq[gg;95;T=nFPZBlQt(gbY/iffoYgRi665;D.[CWcuBS>r0*NZ
%)]O+-]`5iS/V]=Uli,;bhSWWIp!q8[o:7Z.`-?:3\['!'Ft:PFci6''+$(4W-X43BJ,fIkAnLI80Ji=el%>ClfcB\t3Tb3fs53S^
%R[MP]S$0;$q!b5=?]T1C^Bu&(^P8'[cBc3_D6Y-F\\J:/k1_ORk2=/+Vt@CdXgGco?WZKmY</f2n`r@hI/L7VJmV1CeT5'_%JVXS
%!.h>!cGB62pb]I??dUC5olS;[J1o6Qe:YZ@a-WuOppBMtWu(>lf'tMEV669'dc"XC4tN^U\!W5F5OdtXr46#*[ddiC5D8OcR_Erb
%g8(og1bSFF19][=`VeDUoma*)<o]onHE94WXp#ha8`+sq9_Xki&%ppEXiJD4s%J(@T)DPHIC/PO%u<=X??YtE1i"q?kkCngR.hZI
%>\Ls^^8D-q5-66jhPuA2rqiM]W4?VF4-amQGk&[AXY@*F04.t$b_n?0lM*gVND''/N%a.rbE)#1`8*pXR%9!CE3AA"kXV]a^[Js7
%T>(41^L(#0i<LmC7/J?NBDXCNYY@[K^HQu3kau36WE]@WO,)S#q=t]=Yl)k@*mH=.s7eVsCg=+ZT%)X^g[[R5hu(Z_o"sOM%i%<[
%;))/]^E^gV.4@Ekr8Cr3cTB+RiqC)t]e&+s`YU/sKtUb,GDbe`_J\n/V*F70rr%':Ep)Q.r'n;4o3&*\XRO+Sk@K&/P^W4M@gP;4
%G2_IadALrFjd0WOL4/_dIFH`=^")N$MuCMlZI&,JIX$)AlhPtc?Z]Y),#:/bfkjc4^M5qr9f_"a01[K%?LL/6]63S@1NP;>(UUM#
%:Mh`D0ud/["CM).#QET:7eadj(&aJ\q;7TqF6_c/_r]=sb_,JEmkZc93s1SRR@fmm^=1)n52Zf,p[$(URCQDfJ':#ZEM!iKZdjaR
%S9eh_i4"K\ft*sVCV<rRc>U/Rc5jR*Le'`$AEL^l0.Sgh(P5^EO0n`3RE%3^nWWWoN5M33\tX#cbW`4ZR[GZGeRtJe>[@4+mCddD
%<_K_Or-q6/GMiKj&UCI'E)rJt`;spY6rX:';>Wb2q_s"-_l?nMpYC7,\+/=2gMouDS^^T=.PiS*kF*qcS@psD^&E>+ZLm_akK3AP
%d_b(ha.3SOZ+p-S,/=$BM4XTaCncE^\VZkAIqRb9cb5opq;uW/0&P-AGf/=*S6_VsSt+QpG<.)fju<5!il*ti-C<::I%4I@+r;V.
%c^q^+=ai+"Ao`>!nCZgAlF4s#>K77\:2W9UR%)l:qKZYXZ?cAmjSl!pKurVm]01H7m`Ni9na1[8Z6l0G:"FfCSt/"BHM[L!q3qa_
%,FQ2l]&kBD+7?h4]R=6b:Yr3<H9?KQo\eB__u#?BP>>OEInY%K`N@8]fk91h?QVs[:;1R^I%1$nX_uBYDK#NESNF?-Dg)-Fh#-N\
%:J]SS(RHe3fqn/Xhp.++S*+Ck]XL\/RC/[5hO+iI:Rmq<GP95'fo%49cd,o]I.hE#q9u+ZZSu4J27'c!h;4W,H$S_lm">',bj;+<
%LL4ZFI]Pc%I3rX%QWNlmBAYhC]U=2W:S7W*m^AS?=ec;sk71hC*it+Nprnd4CMn%`n_pa`H#r6!gqq@KNObn+madoXcbc3Cf8F]Y
%J+NQmq7#NNb[#\iq>&gRqfa+*h0LVibcP^J?C4rFq9[>Kq0ZUbmb-C4M7H^X@!6F/Fn9Qiqr?`8\^0R/BDTj-QUf5kk.]/Kq06`L
%_5.[_:7PYiG\lpCbtlBu\\"Jpfu_tIZ2!n7[pp6C*__SG?]ujth9oAjNnmppYf@fUrdNhY`q8WB@kZ00Y9)F\487aeLO450*SZ#>
%rTCG<+#g+<-g,rQmc4*?e,(Z9(Or$$H!K4`r,UTk\?^AWr;HGLa01@2O,r2ro^L?"HZq+o*.R=QQ]FA#rUKOTlb2+ma5;C'EQ:;Y
%H+SD#i5=.Fr8dgRR6RtRro*csIfEg4pt9`[B342Qq9(j$&3#ukl.5=Khg;s3AcBgLkmR+/+5VB(^F=?Mr5W[O@fFQYNTpAeV1jmB
%oA;Km:+U7SH$[?/^RC`Rp[Ht]'3FXO2(*9+Gl7QZlH>*P:2K9e4?2m-kGNYS5.G6`-h^VZ^H(gop[TV$_\3h>9MS>I`2=tgFD"BU
%p`+aQ]RJnre!'Ms7\5"ujmi8jQS1;,:;4JaY]=dQWc0>8>eN52E8p0Vf#!j:`RP.,Z>ssDdd-ANKq$u&I:$*Im_3%QH=qM5iU,7=
%h1_DX:[jd+DgT<l3e$JNii22?Mn)dSe[9=n0&8:pVf(a/gSZ+<J)*6[m-FB2;t'E<?_6!-H1g1HO0<J./1rK$I'ooif/JWNDU#n"
%]_5BR=M0.[g>:i/]r-XDS$V"507LVOVMdZN+!KJ7oZ9%5=&5k9\*oqQ^\%3<l0I5Fm$rO/omQ9#ZWF4(o[[5prUg*$h2S8a02HbX
%QB#<W>k2NoXt3khs(u91mbW`&9C);J?@)Khj5/5Po[0S5T-'\`l/L50pSMj-h;7epVZV<YH?]>K`cQXjr3>MKh6gJ9]fTTpcHP.m
%kKb\BHM$W!GX#ie/H<BUqTOSu5P1B,CNj*W+a15*^9,+u-Vg8GEaIt;\Qs3sDVbqKI]UhOooI]_`4LfYMD+U1H2RA-7!>E>^MlYK
%GeEN;hVJt@jP!\=j?'pM<IVKd\uq'CgUX'.KbKC0in*LClL+6/BBn`\ktUi"qls5[<p!0@KklaaBP/+;l=Kj99s=DoGP%q\m'?W'
%nhHNbN<b&!A'Y!S?8NJDqg!8Gg#B)YHKs,nZi07CGOo)^qed3o:]7M;_p@&+bKIrng6i0RG&-?;Yhr3Jo'Y#,X-[(QDf<0*=3j!P
%:EDZJj500ogiMB4Z[%&cV/\[O]]UKFS$29Ep$3FEY((rrop#LU*gb-b#92Y"X]l%hmda?kSmOU(5O@1=r&N%c\?)FY^:P;ecEA>.
%LY"b]O)MLgdE)p^:S0eXoBbGhZSuJD,ebne4Srsle%s_.-PqlNG4+#=]s$VCo$&-:Y$F-ZrS3TPY?&r^hmdaeglG17EF,0*Zf`tp
%J)33#qJ#9hq9ADLiV^.qcei&2](Bh7_SoIB(G=M#r3UV*c2+]W(Cok8IIZsS]8%1U>^Q51ir-KeDI7e_r#Stuik`pVr2$6djkWQG
%miT9To\a+gp!Vu^e(62m*c/j>B-,hjF8:^F-S@VIH$jZ.rVl6$Q-&>n]3"XeMk)BMh`q!_A`MgjLF\umCjrsAir&6-X7>/prMt,Q
%`8T7u=)ZAi4ZM4`3.-!ts--j(U/im!5Q:35cLQa72qP5RHi!@42?2V6pM4so9W-KKD1&p8mGRBFa4JY]?ei2@24Rj[^@lSfjnd9%
%rF\&aCjc52j4p%un](Oph6e3j*rPe^F)lH__G.WV?JiE/E$(^_q<Ib+]pmmp(CkA?G^&u7[FN1N>>IIh^NaPoeDA7#Vk;bXGl,Y#
%_WTZh0=I0bIuZGumk"B9p[;ABSm/l!prTF8G<W-I?bCaV_2Ic+00F`tI[@-p8A]H2a3)MCph]'/)hlGIQ,b8TS6G`qro3O_"Z]`#
%GB)g2o"?Dd46k\cX61i((]DBMpTM*m0CEc2\bl-qcbI-d@!_:]\Hg_m$h`Gsm*F,k^0TVZZ)U!)cE5s;o^_21Rieh`4Ij(\nFL(u
%nTFQaK6ZrHIHKLD7CVdMjI'$<k`Yr3+0C;SQQGPO?b>q)bkCtgj-s[&]mK\R_8=$Pam@3i-fN1Do1rE5Sp^%gj,X`>ekU(ac`LK$
%EVJhRo>d1>XrT\d\%?Nb?]aUJ5$bh1raGg&kDb1rO-)f6ETQ59[>jA.q!?#ZLPscV\m)@%5CKb\o%_]T]D&b*/\XC1T3ZfOp?pV7
%(FhP>D!l[qIeM75V<:WLTDeV6s8'UT$i/cYW>BdOa4E!$^OCCsjhc_Raiif+43q9JI!9Q"e`>8&Sj)c2h#4SJ?EHA<]^k@RP<Js"
%Cq@1/%joUe]\`1Vf%s*PeulcuI8]o#>>II8^0NG%J%f4f,'VqYIdpo`o@WGS0/kOi?JjC_IX1VVk0Me_&)Wq)[(?*OrVcTX]>IS9
%*c6W.5>]tGp%Z.HZ1[eXmEPCnoZ,;H+)ZqQp\X80(:MI.@CK;k4MSJ@[s[Vk#CYpmeqXJL:OdiGrGYnhe4SWtpu(]?Rub2=^J6uW
%LL8>T>!94,rb6<Fn8QF\>WB4aE:*"MSM0_=TU:1OX'<%t5CU/Qs7tU5m0gOGIdd7'qR%i&p\X-+c+W`#+,7IA5NVV<m*kokqj5Vn
%hVWgbDVY&.iab1Ajn];Zo#oT%ET-4t5Q1-Fc7Qa"p!^O2k7<f%0R'btps%QGYD\T+oU0XVm7$nhj7_X%iC$JN%kg^cXWP8;j_oTT
%3;t)pET<a89_./L_.,(AclN'd@t,4ZhVJ2*j7E]"2L<JP3B5[J4RCf/jV__!D'+5^IQs%QJY,5(p85V!d:i*Y_p/5G=pii@6M=2:
%i;D-Fi2p3kkKE;MpE.kdY<Tf"H%WOfnGCeqLVn&*r_'`8m*=PJgU?cQql7f;L!da!QaZA:T6BV4ZF<n=Y1J^Uh-'?@r9.GBj*6t.
%?i=X/\hC\Qdd-PCMog!/=ZbXgr_La?!*A%Uo,f@;D/Sb#oalA-=2$A[Bm%1:'b,TGcd$Vs8/MtXkSJ$B^CsZF##@$^_1+WH+0=PG
%!WN&U<tE`GkF?8M^[]),d(_aXm!iWCR(50Iig#mVs%iLOUOW8Qaa,,-<eM?)eC<f_B?1-Vo$YW$]$`m@eH:&`iX`iL*$>.k*Cl^Z
%f\AK6QAG6Eo?51fp2O*J=*FSNrV4k(_=lQg[l2"6hqL>24"22<lLpQoD=6f(+&,W\VgedDoEU&rcCU<]f^<GFQ*d:7Ir4W8YD6Jn
%&(Ab^J+]lBdsBHp8"8skIXXM.<rK59U!)s]:B&(B2Yu9tIpjd;]2I<ANC.LTnW1*j_L,P(\cVfhK`BNKci0\nkeE(?SeM)a0)OO_
%Z*5.M%M'W\cd):"c:.^0qEN\^i?'N0+49d_)fP`%32b]57'/pGDh$G+1ZO6T2pjCbnJdP70q%EuqqqG3cXgNo.el6Qb-#'aZ:+im
%dFYN/HBspKbo?1(_tusYIjrqPjLJ6@V0a`E\Zbs='^9o0?^0\;q0uCq54t(LVje8sB>"l]s,^(pc&a'=Vgh5u+i3gN#Yt3qp]b[i
%QmjI@C.?5t21^ePria.2cDro6;Q(ICgm#a*S9\.i>,UA=M0`p$9,@S\Pn/G]MKYY)p(ETJ8G:r"$&[m<Fp9W`e_]R/j5j6S*<;"<
%.VM&ddA<S5S(YZ^]a3)#UDm6q4r*=bM3^?%4>*3$/Njj"&QmJu?(=KYGCj]W6Sm,aousVJ](IFPeO_ohL;'bh.MpM<FIW[U`Y]aa
%1FAq9j-Ks"#F+oVeV&jRg^([K:5p!s__6u`89et@CFic7F?fL*VQj(rIksPJNE.df0nQfgXL9^4l2+ZXp`4;FDaj+udXe"(s5uW%
%bfPR,V]5G"rB4e-aXKYg'lf@VIN!%pM0oCb)R,GuR$,9[Bqoi@.lS3sAn">-kQmK!N.,Aq%LK3>;2YR;$:G^Gr%QdJ.(j1*K5Tiu
%``:_eXc=`(E+Er[bt=15V;u=C"1V^H0iL+K@D$FQ(s:l.bEg'mdM!Bdlc/.%c$8J8\+-5i+'i8XqL>'/<_;:q&gG8*KE@FbUSUn`
%8Iis(8UL+WZ[Nq^_"p#Z,Hu;h(U_FoM_/\&2Geb\#Y_O>C.'&fD&nO22[5TP(8;^CL_n?sQ;4>m8tp=<oK'Qjq>frM0)ROu@E2"o
%i-sq.9"Li@?/Y/qWe:q*?ns."`6"FGE_:/I#B8B2R50o%@0SX4Age,>,e/Zb'qNoBBpq%1WCB]OG?,hPf["MI'n9igr%G2c\iGU*
%8rpDp83/.l13U$!l0/g,C#1ESK8h1IF;r*@`!`?b)j8lTkRjPLY2XBUjrZ;#ho[SjpRfDn(G,s+i"@4kSKo6?ehm$nBRQ1_FgS#5
%&A63]e]poq+LN,_/L95rYNPm`oT3)?l$E('^U`mA0LSoNa1*jG/`D2=E)T5eE'mMK.](.p3AU>Y*B4"@Hj*4gd#cAL]Rfk&LGI5!
%B97p@=tj6$`m(lp!4>J`RJ,ee^qrr?'uRq(1`%0=_Q/m=AH\d7.A?d)ju2=&?3qrMLEPDG99K=-Nck1U%58]"+ZdtuSOVnD[@VhA
%Jr[RInr-`[`T%B&rc6\To3cg"X54^&[2Kh]1nI7J@?$OORVAQ*,A@3U2q-+=:oEeVC7&_4<!HtdXhB*fdH)md.:4_9<KP:.6A_f`
%_GDJRBst08=XDI,o@=;4'WlsTR\+;V8Ok["*G0ah[]Or%"p,&rpZ74(hG+0P0.f<pW$,gPEDK=_VPIgZNgt2#&KA]LS<aY@p3KD.
%6fM71Ok%mDp*Wg8:7BR#3`RDFd[E]2LQ7m82?]'[X<At-%'5$m3U>%HS7Tj/SE9&]EoqMQe1B?gWEFC.,%j2>9?rF=L7Cbi[e3j(
%%o8Rjc"^$R`!_6?)"n?)cjd3'o$EU-AtkIt1I9b(,AU@:b`e47gLd[FXTgI"#aL0kqX4P39P54@feAB3B83#`69Kf*q3q;S@!#L&
%_k\OY%N,33%E"DQfQ-gKbROP3<(Fu9-`u5uQo:aO)XIkdecZ1RqR@i2*qjh?dZHhp@0+b:2-gP@9G)pA-pmoY"iH'@NgXUY"EfP-
%@e9*s9"u]o,8b.kOU<$3DrB2T&?.9-!W^(tP;."2d#'su7ZjfHQ^,n3-Bm/iV':RgaM>!$&h$**jj`pD#D:;X=:n^-;"#RP#\Je5
%.u-k/LmQDQQ.)^`KQCrso!h57VdtT26o#qhd2T)9@+r/CEeTE?A["]be&2>Bdst8]:i7j!@`b7.dHg@EP%+uJ19'keG;Ft)oL*!r
%*B]`lLgX)q`,j-h"`"lk!MAGd%)HS67F-n4Te`X`TG50fCu@+Lr8JhkBYdjt<k$"`66OE;1P5*&5LG.G?sr'>l@G$fa8q\-7q-7*
%>EA\&TUm8U^dWg>'2D,Qbs-rrlYlsBkYA3K+@6kB)#fg<b/rtqGe#>6+F8:/qpS>K3@1-Xk4CHgZuOunIYJ`'_#<Ln@%Vq?:-ZXt
%#dHDg$"dc8:HsK&@c:0Z5JoU2^r,D40Q1HNq?[QWiLcIcmp`)F6"aRbdKBWXPOoicIR3bX7X(b;d\6;9(m`WX@&)1X_9M3t;\!Gd
%pj./^#u%otkQ_`S/<4X/r3Sc$Fl;oW%R5Lh>q9kceAG(s-DDBQR_qoT\u?OrS:-";OdA?kB:iUu=EQV#%&-*L3rHX]&9N!i#m:bF
%'Ua:F#tE]CloRE1`-`3l@!heXeP>(`D2pj.R4_)r55kW/+;;?H0/,_:Vk657[#4D<-gK'LD7\1l0Y1IoGPXToKQ]h_T>9/Af,]?,
%XFm91*.Q['8VuAJJ,G.:IVMQ8c10sa8Je`ScG,:/ILXQ!4oPRAcrg3br!?oUZA7)5a8Zs2r:fCjc7@m.i='LS?IS/pn%b_8d?U;O
%1*i\%^VIc)8dJD?rn_pndY#!JK"/2Ti&&@86?IUu&Wc!9&stLF-#F:T!\Sc6!XUW$QGnjFlqG$e!aG(oC7+CpdHKhVHO&sg?nB*U
%Yd);8&DeZLE.pkTdl0ISS:4"@K5nP'XgH7P"&bJL3$8g)?iisIJ>VE@/I4WNBPKdIc-LiurSiWSO;eB:ZD1%rG8,!mC`tf.:n00s
%%kCrDOjiga2ft`,6beAMda?%]8MsQ%Q7fNTLd]eAAQVi#QN>mhL&Q]F]9Y&ZWY^H/#.ce*SjS`4#\0NRX,\g.4;jG&%:,We.2><o
%@3mMhQ7`?je)`"Os4#6epDWoSDCkEL:MWm[m`o>^P&<UTB:OODRTBW]"QG2-gI#t%"enDU@cc2ts!HVPN%sLUm"gtO7-`B!C,94o
%4V[m4gb>KDN@4_c%K-db_.O_GWhp(n3H08=(7m!Ip9,jKU&r_]YB]$$V,%;Yq,XiY?qH1h0YRXg2N"\@B?=*[n6o;K<r!Tcc*A8q
%Fe/^K9o6b<6\ZI6Y3G6n>*(7!a*hKQV69`B#JZ*ak^Fgg0Q4Cu1BFe<1mB&(L@3bd<dfleK3.(b$'YW9Lg1,f'R-Ln`r`&EM`SGS
%XH+Ca3-Z4g(j"&8&hg\l41^(EQl5onQ[sc*PVaP,V%UMJb?t=6R?aml#=Df"7V7[gXG8fmLijgWad5Pj:3map$ABl[fnb6=`0@_7
%gQ"s08RTE+PK?!4PehNt/)TQdUFSlM"1L.('%35sX:d^GO75?'/mdXB@:>;pb-TO``ASL*2KJ:H4,DMcOn;M)&48N.EJT71odj6U
%AI6``E%:Ffb%fnc$8Ti4]:qNQ.`8KJ!(3B3!L*%Od=lp;Q5pC$-#Jt"5N(FL=nKqA8G2^h#On;gHpT&a(r-5,!,DUdr.Z"59Go"o
%]Kfj*&);sW,[nKM>T%d;XVh3B%_P&!0M*`lIX>C/-!EW&ms'E..Jcu\$>d<[`-OLO(e.P,B]a,6Tij\)$I*$!<iDL&=J>/tB8$@j
%*@hPS/Z^Y!IpdsTPkr-FP9H"lBPd`F5]*M;4b7#m')gcVo#\)]Q>kpW&5l2,,"eL1V@C<pV-S-']#^4#"MCSC'VI_BVul>n/9u90
%[Td:D$pu6Z%h9a>;@hHhCgjuLHn,V%ib4bHZ=-4c4=WbVID!A$s#hL2-$DX=-S/qc_>5g&jM2`ZTt&8)5pr]E<]b:3mP19GjVF7C
%89Q`WB)ar0PE;U)"%JC)Ek:I*d"sb)$LnH!YF1&iV0inAZr9-Z.k9)R"<A'@80])$&!ni(_N'(Uq[5C)8+_H"`rOoAO%p3'n$++1
%Ju]odYpUZn3mp(D%5i*tfoCRbX<ld)D$X6VCoC5rh@l"C0bb+?6g<A5UmAFlP]3Fc1&YY(18:HaEg91n)q.Rb8br_ka?5^g.;97i
%#k`;Qp%1=4V*FVfSGISrPpDMLJ0ZS+09j/4,cYSG\/5NG#QsLZ/6QBuC3>*\#[WVNTBr6pE.g4f(`WuH1BA.Cr!]"a>'O>M'G/RV
%_c*T5ggMsinl9(C,TRmB(C!+/bR7$2\d7eF"W)@gq:BSYP,'HZqhZL-,o.U4P9`=`B=O2ScfsfSDP<7HMFi[6.;a`MM=1S&MWi-t
%+_I)TNG&!!",dHHan#$)7dcem>Bf>#KDOnq0Tn3%,h\sqN.3JE\l&P1Eu6Cc>t'VfVW@,83_khaL4ehBDV,*3dM(:&:d&sB,YH7e
%0uGPL^:O*I!0U2+9o(4;UM)%+7cn%_gAZt8'!Im198n^,0,dOa))2g\^dnc//OL,=8FH<#1)+-4@_!LH8U*T_GB%"=^bk&A%7B+;
%b'?-Z-nIu9,VKWI-#nhHm!.G:g+El>)fZRkJg<$UCcRBK+s^?*3JmqQ]UX/`;:<k=(hLlfdc:7@flC$oCH6,0%ig94ETj`?'2)G\
%4(-!(#+9]I3R(CKY`8=ei@$;96oJP8!grYNL80j\)jTYIMI<%%;TD`>24!i`.oVS3,hfboWK+:.^f:@4g_EIS^#Q1#a<I,&*jrt@
%AJ+h_D8igt8ip.ASCe!(4tEBHQE,%LJFUoF/I3MsFsu.n6Gk`n&>I8hdTITG;m<e(@tGV0a!ssqU1C0n7W&2?(G_EkqQg$9OpbgX
%Eo=jhHrMp()&uN7E/9<4;M0N&_mEfhdiQ^];UAD>R#_SPPTjaL+Sb$mb/VGr[OE+e[s/F)FH1aj#9L\%'b!.^NKe!0h)S7!*++@;
%!@Qq3_f$rNq/p'o!RDp_#T<;c+Zp-n4#6$<(kt,aKQ9,X6GRB?#:$M+YdpHAdr`>JT7@?.OE!s1'BkSZb_?-?XRb>j0"ECH*!,%e
%=kJdO'FfGSn<)P(KF4Fc6C#X4eL&N<MWOi&'fH5ELsh?O&IB8r_lMHE,P%S1YoSVY9YgiM0dB7<JOA*#,uLJs>]#i?:,fB9L`$5Y
%LoWGXaCte`RPi:pMb)nWgq\j]=1%C?O^eEZYi/#K2g!2(m!)A7gg.5G7>-mV4+.??XK\94/%FP,$&]I'n:h`&e[;b/?<!^#HGoLq
%?6k*AmcoNA/#_LH#21b?JMqnS&BVrFB_[\17$k">q2fP]`i*\K&:@o[eMMY5YY`Aq`57>JbE`["Ene?XO)n,f\dfjmS7S0kB:2u?
%JqZ`j*[M6rnN+c@_GQSO@Ye-=%!g#d\YQG>@+rA[-+-m."^lnBk-!XJP*KB-Yf(N<.MrlUS>2o^E'HL+YB!rmZZ7fGPU=ZoXh98_
%Pp>uUM5NjB=)bqF,O>5$%UXn<+uCt&G\H.?VZ7N,?;%=eMJEnTG/dNJ=?-\<^rZYVe$5^%c#B2ob7[G.ka#eY8N@BYe'Y?jTH\Kr
%Tjn-I7kO:uM2h+F$"spSG&Y9qj,<`Sn=u,'A'?BZ8Vb+H#*oXP*9o2)58;L]+qS-gRM6SrKPrCR)Iq,D7knH=.(V:;(W[fJ-&N"Q
%4InI[+d4+<bE:_XFsmD7_(*Rng+0])?DVakUJc1DBU3b?*O<Xl[WX>kIIOrR4i\89_+6rtOT"(#.`LCp7k9ZGYu@J6iepiKW`3.^
%@ToonBkZTj,\M'*XdnPsVXK?FW'_lM5V(&ki!+!'i%3q:32`MdYp`3L9L%$ZF[JePa7_C4g7D>5'f^q<UiOh7^ulq?EP@_s@oC\Y
%IGh(0;?=s_Tlm.L?lc5d"SkcIertD%*F2H3TQRD.ZO6C[%mihqJ?tS[`tjIj\2P[e]QOi]D@HNpf_Vk<?a$/_RBo3.YHEJhae;Y,
%I(TQeZ\SbKBQY'fX0MWgNiq=oOG;+%"PJ?lro*)ES!Zf:aYL.uXiZMU,YVZG?UQ7Hr]'Bel#\r08/qh,)3-IqaT2T-Mc9s]lRC0U
%5o/1-G6=e`"3Fs?h+6=E8H(A\,PV[V^H0(\7Ec""9HR5ACUWb8V$%3MBM>*"LBRPqN"g4o,&UIHD6r8cepu79J<7eig$KNN8j=Wd
%5lq4uEZdNEr"f,a4)/.OEe6,U*i^.&Dq[sT&4o[%,:-=KTZan]l4-O/1I.eYR.+3'F"kcpSl1L5hh&<br>_M6aCi(DEQaRXY%/35
%e2!p]o,&(ti(@)QR7ph=O<t]p`"["0YRlt-eZndqPhsSX\X$_>GFSYR)0dG37PFk?1.#UUGnFQV;Q16U+HYiLgXpNJh7"j:fl@.&
%#K]jg7Na*NA_SqkJ1oQdNY14%1iSG_S3Y.<V:@J_?m8iTlp7hF?qT9TcO)\bX'8W?d,_&@=M\t;#k[Le!GP4eo*m2M'dUh1b6gA.
%F()uo"rVmr$4NFig-#iFh/\)jq-]=0fQ.+\[3_/]jTL=c[5fqX;0">iR;hE&Gl/p5`d4$,cu\GFP:c-#NZ"#!9,=NK^agFmODYUg
%bT/ae,_#f3-i&7_48p&2qQ6;M@.]R6n4.m_IT-+R;SM(?UbhN?g3<J>m5lRkD8ICBp]$6h*]_YS_d4kort`iq$40uuA0F^1&sW#p
%K02I8/!N;p*sK6+Aru+I2[AaOccOCAeo6L#qCa+X&V^@]rCHofl#Q=(Z!juZ!85HFSYp8ABObX6WBAgBYTht]LIU&4llGWt/n9FY
%%3R6Y/pW:7/VtJ6i/3$*UT&m$Co.;g49?S)iH>_3_Q`#NW!91[`Oo<c"!".&OhH^kXJBBQS^p$,!!-8&GioO3`CcA\PkF3&8Q9MN
%_th`'rt5Vq6QT:I'u<%j&D4EE8<p!fTuo^0"<aA/.TM?K.^97sl$h]N]1Q$(HLqs12.Z7gYV^nX,"!sI`f^CZ6CD^hW,S@&d'#]<
%8@-]a3@i@TIUgGp_["1`J="=!%V$"EC/21(L!,!HV%F<t1Jf7[Nagc_"]!('Zjj8"K*FLn9f)1P?HjBL<\2F2\MioVjm@YMd4m&j
%C/7O>C4!5n"\+8$'<=:!KrE7q*hE9EDiup.3miI11GIps:$`Fkd/t4>BT.$q,!*Sc[d]C\*bc>lj.tLO\eH<<[q[-H3FQ8oe3F<i
%EfqY?U81;A@#69\E.oeGqOo;['M12sqa`=N8IU[n),cndO[5XA%KSr&*V0ChFabM!60i-\q7pYV*`M/^=>(RB(i_o[PN/^h$00`/
%gFn)=84I=L6!Z&LfgtS(Bso<b]B)pb6,A(>\fM_G[AY3XMr9DmV/sU8jn#7!Zn:hpZLDsl75u&L8X'RN<$"pdb/_rI4Db6hJY`Z4
%!\Aaaemc+&n1ZAp:F`&u/A].;b[RAN0=(;*nGTdX.\<FuJcdbc"Fet^bG1trmdV3?ZgnA6&E8H_ePQ`("%N*X[KEbsK)siubV3nO
%>f.J+:9<bu\@1b)Aab5'd7Gb]C(F$)CjWZ!&OqP[&?J$uKsL*V*_V#/+%2D*JfC*(H9DVA988'hW@i6JrE\1;gsS_Ij:dB08="WA
%?Jl)U_TPWMlj-.:\1Z<(/KC6h;mMf,if\)VL[QIF0($IM"qa4ZUdsN7qDmoSOC0nH3]_@$&X48c=`DbGj?jmr`m29bB*GI]BtpfY
%\_ICT,W0)\fFkr<W+otF@G*]t-R:#-.B\"+.eGEWlAi?rY7oP5M^-60B#\j7[,3L3b.eG8Uul+)m/91G_W.T&(C,=+`4H+&$T$d:
%:o#&1V\XFEc'1`oA9jCij+n1mSo>2HUt+Nq?QP7)#+Q[W&a'2&l<ITW*.iX2J*l3V0918b*Q'YLXQHql%V>?o2,8eJ9h$\h4H>I8
%&?F"Aml6`^VM"&071P4</W264Pe&Q#"ZiYL(MA&JH[$lr.XokJ:)nlpJQ.*Z&XR&\b37n1V\K?ZC]rW0@PE(=.-Qt"\^O`X![^<Y
%II*1SCeaR@>FpC`HXq6lK9;?Hgh9k(Y`d>aBFUce3L4%>JruUkFMVR)"#/bD\]g/o"`Go$3%:(U(K-C&7+)N$.9\B#bS=LC51Gh^
%U3Im;(JkPLaXHA&AHpQO$pucWD)ccmfFDpV:pM%!XE@X@eNnB<OJ4nf9^9h;TpJ6/kU0*1Ebp<'T.=;@X)=ls/p++_&lj>,N'C&m
%9WP6$Q?A@$%$E6hG!?&=EHL&,>:6:Y7CgAMEkqLbDm27;3f^?#Sm_ln5ZE<W3GU\H>ETs--YC:I2Bn%%.a,V0k_[:'Z!%p=Ri&+,
%@s1;f35dct$\Q[UdB':hQ:G"!;P$Ip>gumMqeBLjY7BKN<?#n>#$;U!s(eEbj[s.!elr.WZp_`VoH9&74jt-0a=NH`I3[uGVLV)N
%Be'Hd"9KZ].kcs>eo@FYKlr#Ym*5cBEJ_M=3uA>`?*'U08+/CJ>f+SYY`R;388SbMMZc7YHu%(O]L(>8)qdCj5'Fjo)`,UQejWAh
%`gX2<#Tf$D?:Z&4eu?qe6i7QEZ8LeL=Jt$ci5&*'jr=fPAc\Iq=VogpWc_7B79^?XZ@4=0>#Vt@[5Fs7"\'8PV,heT$<:<B^,!LF
%$"/m<KXc:d(j5=Op0I`P2ltP"r",fXiI%bN_$2Y*ebeab&B9j(4Vf%Z338e+MAVFe4E=e?k6E^5!@)i@NY3bb$'(k15W6N:W1bSX
%"72DKJId^g9KR2qZ\FJ\lZsN$XW)%X]HX%6%2E<r_5Wf=%ToREkU[L,[E#_;[Q3/R1!o^tL;.oW!4;.R`A^8=7C*'Gq#V*AZZ^/=
%)"'a'F_e3(eg8ZrTJ:6oJ^R_VOU]7*'W@gFbU$X.eKpblKlE;UX@RIl(lBmsh9MS-ehGleg,6[;2$Wh`1cEemk%1lRc5(744;b5D
%B8qIHOYAPF/&GK5\RN"TYmV.5p37`^CV*ZR[T7i%-9@In@_`$s!4ourVEPXKZtO!)&BB#%317K?6HaC@fLaDlP$qi9h6.OIfGt_Y
%j%4n>A(I*u8@M#>8,gmBGXMdpe/8l%*RQG$FnaB+@/Z'^_#r:GEt8,u/>-LmB!ha(enm8q?;](AL5N.ri)I?I#HZ@H5Dte5mAV[j
%D%H@Q3RFf?fen:&3H914jEIJe4Zh`.-H=8K!0J&X1BT@+!7V9!B;ZI<f?D[1p;r==Uif/XLB4`MD0rk(K9rkKHF.pZEgWN88OqA]
%*aWJJ,ha0mYCKWSU5h.TL$%WBqHD]WF"Il(-pZ?2Oi)'BB<:3Z:%5.Im4omU<-[/GNDs+k#BOEi8FY3]L2J*S-'-4DDSn'1`D-LW
%:t\N(+MCoF8"a;("#6:)%:jC]:k6`=^cNhS$DjdQ[U/@><CfJB@S:d[+YNm+9\9m7P#PCEof%LF_BQrJd1cJ\1qOGE^="m7:q+Cc
%$7P9q*K7.+=^)tJn;*Hdc+[``rXrP8)1e818n]ccjP,qC2dcG,Rik:rfh,rOX&-Sn6H^3u@rjoa;94&KMdrR_>LcNHd4u#>PPe:q
%^+2oW8(K&kD\186%SL=4@k1]HU)ZKfR?.i#k[5Eo.sPTp[d\%NeShkX?<u1(2QV7=mDullmN<:`N))6g2Ljd=$Z<`/cN$1uPXTUp
%DGI';9<3H)\O_P.Kp6b3X<$/N9o:T%'s(/.#/3#PK&qG?H%HAnST3qJf$'#Yd[6A$<m][gc"_5."gd*j/T*G5YZ2625RB"XT+\#P
%YDhBX7]n4[M)++d:e6W))`W@ea<X[m25sGcTJ3I0dts;ef6RIRG0OIP5a!bA*[EILa,6(!HOpJs1ucir/l7beG5[(4As"![*C[-9
%aO=Rs$>l*]G\B!hUg,M"qXa[oBT0n3n$0sj"&j:"R1^`HU0%FSKT5oVKPYq,^"+-GJNHO%W*4Y.W><Hr0Jjop^!U"3645NT$j\kd
%PM&mLmCC4)R/L-s.,AoN.tdDY$Y9(b12LMIjcg(MFWT<WWP/X,Haqc7Z\U]G"_Ejh`H/@7oQl^]_kuW.=3>C=YI/Xk5$-m`nrk4'
%HQi4E7-?\L5]Rl7>nfQrDXrpl4EQfu[lme#V4Z6(O?1X\e;,[B-9Zsi$uhFl\O3K,F>43t2,m$5$V2FG!<68_D(,*ORUi(KaBZUD
%9?&?/9*c]W8A[bq13)Q<(QSDca$C\_$4!ICGMU`I8-b=8,2*%CQ`b@d>7%8#*M(IW8t$0g#19uARqMdk-8k\DB^&.NFr^]4qQh[d
%I=r8gONj:RM)80qT4hQON>[:=.nd1^@L[ri>S;IRfb#gG&G]cE=laU1Y'A0AK;_Fu?.;gKPj+p)_ok87cX-8*D7&GVg\Tr!3kIk6
%hJOb$=>'*07-6cj8_ABLO@o$bdYYbnB6i_c]cj+@*#^(.1V\/m@[%5!eg&$jl"$pa`aP(Q;^i+o7uHW7U/-4F_d]mf,^2]LQ0Jeu
%mi;*ZJObdD*)JFP0eo+JUQ6Q!*L[KTgiGLX4,pbJ:#[l%hpGeljetcDl.dYS/O>*f]ZA[R%$;bM$69fnSQW%],hfq+6AJj=3i@E$
%C3QQ+L$<XJaib/8-i6L+IE'53M'iKMR:HYqRe+?5i3'"l3$hICU_(M^,&Mqn*NKn<MrST@4N*->+?.>f'$]>d93F8'4%]0/>`F;_
%%:4+^TZk5cYa?&?Lg>9ORE!CFXJ"jfX"65Nnpq$WEbdRc9<U+B<#`Y55Sta\HRS)%\'X&5\sV'fjb&ES]Lb;:PdHps9#6dp<n1"Y
%Tjs2;-8[V>'gT`J8lS'[b*FXd5poAq^_7Kh%$5.ib;V2_KM-q\hWS>p$MW&q0G5'\OXm)3;Ha,o1".^K\?gIkV,%0o:!orF/nL6A
%!=_=fiJOAah4!Dl5bKF*(CGEX,GPMr(&fVG_?IBP#j>f17edX-aIa+k[q=&;[>CG+HPC<\AP06]ahlUY)AeKQ;cLbkPie)rJs>+;
%gdIQ@.FChbKd"5Jj<.>EA.Kp@QuofQ/dfjPUL7V@&<RSh/D:Jr4`JReP=ZW\Wie0lRAmMKaX#jg)dFF]3Pi6,D'N7dP%)noAN`qE
%Qk+gEKS5VnC<I!.gp9Q0L-*-)#<!Ecn0PXB;[5_!AA&<T31=A.DFTQU(aQ`'$ocK>q+=N+F+uU)Z+,B.K"PWHcli%FW_j@>[VY<i
%9rX@?J=YATgs?NWa(5IuIV'X[b<4p&74EE"UWZ9pnjnKrRLd"Uf^s,9iNWM2,Hudd@lh@SUk2DYNE4,B-II9;AT@&%m/T(@8@^9b
%&t?$/a_g'YZ:.<,`!m:&Q%c4oA2ruiBhQb\%7pR8Kq#h6-^)(eX(qTP"ToB$kme1I&HPV%ZqKp63d=)hLql"c&m&d-8n_?P=mtEq
%2:<f3Tn5Tk'>g_"d!X(%%j'E0)0p1Kpn[GJ<$`#'WV@)H'Z70[\^gCgLdrB6N*dMuQ0S\q6r]%/lm5#'OS&6#WXCf&,"u%Q65$Oa
%V9AoDIoIs'Ma12pW(qSF_RT5ZFFaNG+E='KFte0&Hmm!N#,c7m`+h^Ln:7iQB:<aY8rf1a[-M0R&`,H8ke%.T4.T*l]NGH%rgHg_
%KU2_J<K.rfds`i&S["q]3@JEuY(0l718EsRo^#esYlU5sYZtdJGX^?/#i+>sJ#oD4?J(WUBb)5(o3OL*(pV9:F/)W5..OgdU"?iF
%2<hHk4;jZ"Pi]D*-M'N8M(%:XNa+:Zh4UE#M\$EdR0u0A1(uYG$si7s$sDo$n=m08]NhN=;@??4A=)L*qZHaI85k%.P7J=e3?B0!
%BZ,hAa8GOZU9#'+P0,+O%%99`^4#:(e\Y^X%T7*C>?I2*R4-Bm"e#"OqX'H0.r$djQ>$L!hDqtjI@I[_dI,)"Be9-VQR3WuMgCGW
%MN"=#kdDAX[>Cd6l$c#\=\)RsEkmFJQE7LGHR'o"6,U#mRjL>TKr>dWW@(UfqZ*^aBiJh0=QS?1'XeGG13Ud'gRT/K%&#Z:PquCg
%C(9#L:'looKOnPu7)L')FQ3Y'f)hOsLahR!h9hF0$3Nfo4BBSpHYI%dioRnm>@dku!o?IT8SXY2o);K&RdOXl-;?7JPL?Ir_EEBB
%cI%GOaZMPMPVn!`VE?GM:AU,AmsR',1tnhZ+fa^1)=%DUfRf-J81#P?8]f38#Fn65M."6AOPn&?/e8F8jkp+Zkq;+!BGolH$Sba,
%2?ehs*i+1tO6F$tPM1*a3'2Xj$r0_R=s:Ibg,(Gk\55^KP6/d!cBGPjJp#?'#`AH:k0K!>qj+VrOaU_4D#0U9C8$16&QR/7"diF1
%NF(sb0P^QL?AOimQjt@"+Q7?1L[`jJKh_$!m,mIP@QmPmg$_i0XgkHT3+&k231r66-DF\0?c'Xi<Hp!M4U8s`!f$gS/Z9d4g9:bW
%,T9.geFk$t$RRrjk.((WqYC3X`D?S&-E,p/8M`]E$6Qj?A$9o,1!;W:elKnIW;?T*ZbNAT*C<)]`kI+kmm()Uh'7qu-<.8t+]cr2
%8bLTA36*P+,'#-':.$fh+o=u[%AUIZ12Loj";CX*8=bJG%i1O.H8(+7S`\8n?n:E\A1:qaXrJF::'rflc.gFh7CX=8)<m\QW5A>6
%At\]<W1<]7Ek`N9FJ6HYG,h;T).(\n9VZF1T)?ZCDgm\c@^u.$$=^_4+ABFc0O+dBG.]/DV"$lmnXU&#Op`99G,t:Upi-HF/$%=?
%7ErmZ<>93/q2M<WZ-,/;Ce*,5Pb2OgMK9/u.^]<+,aekLEU.=DpsF>Md@S!>0LK*>>.HPabpZ-I9QZX&0'TCSXsseeM>Ob^6&oV/
%8+[\?5q!NoI0Om%H\%[."?6:FXhKH`M&KYeY\)jpJVThS?=q/8Ag7Kr0.[cUD!iBu\sgE\GXi^_RS]ag^6#=\)m&\I3k&V6Aat;L
%#ko<$O,,CNT6#<9ZkoAa$"K!3"SO1?`^^clbE3.>S@.1u(@Vr>o'k3@F,O,Oq"rJX;2Ut%@&nVlY+0+]Ho:E*@+?N4*3m$I.@7(Z
%1F;Aa*q?<jOI9F@:l*UNn<KH5Q;T+q;J@C_J?_RfK4T^sXCt4O=rG\>5?.]kCHuN'UOqnL/:hET6'bqpG\,KO*QNDd0GZO4`XPJ&
%>emL'lq3<a)Kqd_KTMdPH%hPr'!_.<>sm<MeFLBTY08Xp33^p%m>h'uAIaZ&pX:g<h0[KF'i3(/W<d@$;al.bng^?%6Wtqm*Tln&
%heH*;RQot>,rO84GW3[OGE#!T"_:<roqaGQ9sKhSN=NgZYOE0"^(IKi]g`GD"!u-5j]H#TJKLD?I)U-L[JXf6M2Q^7BRiDJ-Z3cG
%Fi#sJ_r.*[BFQ!i<nYIW;FuKqR@ag`&5,pfPT=-p7gre<%$Ok@egZ_PY4@h=lUW;QV6/RX:cN#;40XJL%AqIUG=6AnJ@UUcerOCb
%Ub(_?>qKb<(%&*Sa\ZH"Psi_f;J_1*;KgdR+;0"N&dAI7)tejRHuG-IGuhnDj,.S3/3uiImpa(DAI=-W6CD^qn5TWSn^=04/n#nl
%ljQ=3Lg%5XAN)Q;]cI+**Gi,u8HkJW8QM+P%BR/T.X5?c@EO.pL9Gg6=4]HOl*-_u4Kgj8(r'OZ3?o9.buq'6DpM[b;0+]I0jBA%
%aDp,6<Q:Fp$PlM4l+C_DA4rAslXUK/rE(FOLC7Mf>$UNbOjK&MZ;A4oJ0Fs$p%C5Hesf^V,B$`nY>2"lXk#X8f/9kYlQ06M=5@\:
%',JNFghDqR3^"Ah%nQ6H=W>ej#fN.D0%)jT93f4.:"#.!9s^)p4Pk,]+8.7&MB-nfQK\>bglXapAL/f2]0.CH1?H8/qiG'?.?Eg5
%RY_Sf1`4ek6#iH]Mne<"2=U3PEjT6Lq5k`UD#h".`!Ys]L^eUeWq*E\qoZcFN*8-enoWQ%bPMH!XVW^C/Z5!16R/&s!/A4U1Pl6<
%\b$a]U`LrE[7[>JVVhZW-sSqs12n9W?lF<pJ6>f#,LNaK.hN_cC8HQD:c3cm"/qB<W]R-bb?0&N9VY6i0`CP)fDU$GjG62A)^kuP
%ika6/JKg0Y@p$$:SOOaR"1;KP'r@uL&J0*s8`gRU1Q.+*b#`W$VAq8*"\^Nl_Dk:)&EjH9<V!uK)UfHM#u`BSA*VVjO:7]hFuV(a
%gd7Z5!3rZ+oIZs_,EidFG*(^2RkP7O+SumO8K7]"b6K"GjHAWZBU00m$.5pJW&)/*9tjA=8g=q1[G3SkR,[Kb9?0\?WO"T-$6Cko
%F#^ml"J2UBBtg;6+_--t$rHP_1;X%?S8734Rkj@M`f4MbOMt!%W5;QR?>:-q7_*%c(3`u[+jq(`^5)0n'fUh3E[t4jdd7fJ7sC'G
%i!i48_,CPgJ/]o#7QXtVNCOLaEi8\3$j-]sgA:L]Cj<()Yoj`6A:J)5jR0BN6UU.CKcE?n@s5,EqK#&8K1rELQen4kOKJo3P91Nd
%[Li:XaZn,?UR&#,9[%n+cdo@2O<4_uRG^+OrZ,CfZRDuY!R-siI+nq($ld8UB,B"JOWp%=\U5s.+0l0RchX=[.='!mj<l@;M.VqB
%JeK*U.u.ZOiht]Jak\r_m%$]n_Q0eX)*lpkdUkt)d\U,AlPa)0=i%Q2Te15+e>aeJ=Ok;cO\p_*%2a"uWgJRaCkT[c'FV5d=4Ci_
%lIKB98XHjA*$>teD)+Zt7V['>6AD*Bbnh-SN6U+tp!8n2;PoK>!/gCW:hsE>c5RY]S;*2Bhj_I;Hf$*A_AfS5q4oF$4)N-B"1e]5
%Eob-jbU_KI-5TX^R$e;e0L["D\5@?l_+qJ,IE3b3]cm#$Ci[jsB3dh68r07aEGA@8(k><d3C'5=a+s`F9)HVnT7Ai->_qn*Q6Tct
%LFAE7a,j%WG?p<0?'1.2A6@4VF%!Z@4[J^kaCSaC*SRkL%;.2!Zk&L!OQ?9`,)KV#i<2S_/1GQlOaqTHQn1+a?C_3MC6K#si)<@^
%GMKY]mF.l.L,f/BmkHReD"9cA;Ef&'QGB>#!]6GDY>"2pP-QB!DCo\mb`ice3&s!SII[b,R>Y$Y5(_]ZAm-$(YlJ9-&fH(A`;Tk^
%qS8p2KDd/ap>m\G<'CFSX6e<@2+JPtSKsFpHOZ^>GCc(3SE$P<+SnK#oOu$b17;-.S3_Bm=U=dRr;rSD<[f,qHAE_[K#k[<OAI#A
%kI>(hJ7=^1')_JJV>7[\oI@6=8ND[ZF&!-]%HV]7BMV4EJhn?^&md'-b&n<pUf0=L%Z*Kf$X?L6cZm#d\b[C[TBBP?DI@bLMd1jq
%,'^'3'V).[f+cZU.u5,[Pa]r'N0K\T[IFSb>!h3Mp.5tKj2NGl'Wc:8DK^YrNofkXk>r1(C2Y3bH#\C&nh;DjFp*3sD<RZuq8hf"
%i,&i3Jf<c\\q-!:(AM'u9qEn/\!Y]QY11[)O?NQ%[Wb+oh"kT&a='pHDgJIC,qqB9oD<m3H)h@,WSmCu*!@6*>3J,"&6*q@1lo)T
%H;Vbpd`joVHbA`>L`9,F?HGffNsdVpH8Am&7)s+]S_^H2ht;S-24D7<*\F854T[-t<7]GB7oo2-3_inr$d'Z+$ls,;./c=sd2`@.
%knGO)(<*n!Jiap<-NR;[_/Q*gCbuS7pJ@(io2B<#']W2($<[m.)$0W^q@oA_CHYuH,1h(VWLpg5mZoV%4^'cW@H2Tr7i1`o"T"U[
%`5.pt,UUo:84.7=:Z>Khd-(^RH9WPq@EtdXCsGb,%0cp_j(5$TZ&TW%1fRH#\nZZ6+QP`bB`BI.4%]t+Q1UL,k@b8g]W[J_(>tGK
%[=6-X#G:OFRn`ul4M0VBC'd*+k<jR'L$KBXjH5srjde;C_lhIa2KIB=7TKdm#OqY^81u-#Zo*U7&.iZo$V"i)>kDs]M]B3%-p'#U
%4`W/s3TbHndNjbE=r4ufl]NGmQHGT'-!LT##[Ia)EN)tF4oqH-FEAFbFSRjYoc^l@[N4rPObNKJ]/;'h(OL#>9;q;H>3^p1d-CZQ
%h@VCa09g;.NgBt&^e;Sk4'jBY)t=QhoSr9@#q;FDQ"X;lk59iD0-rElG.](hHEaL4-2`t!"7K>`j#J\3a/kL1O#X+4gN$3fI*5)m
%V'B#M59l_[L6X#3hj]X"7k"5SXRtDb:(/Tp]ZfgspaiQWPTP[I00$Fo2N?L(GY2WpdU*0X^BfQ2WPH#oZAnMKUEtVd:7oS5'mP;Y
%@O1S!1cE;L%i-`dQXHM[(I]0K>NpINqaRrNG%ff8_XMQH,(7,@</r9$T3!_]F=6kLF\5C69Db\q0<hg,IR'*m$$lYU."M(QQf6tY
%MjUTKoe_ojCpO76L8,+O6K3*2'!rEMS"YiOgF(GimLRO11@-S6YZF+u!D)9-2Qn3:'R1,<8`W,\l("^u&5FOS6GeJIq$#lgl4n,5
%nmb0f5U/CA%7u!/2d/mJ;BNI@T,j+0Z"tid%8"rB%tX\F:6Kt&N%(dRO,Z'MNn!8M_CRTA[).-H<cCFR3b:\+o'r<EkXf4Q%S9#a
%`H>s.9Mk/n&H%og&f#d:?:.Pb"^3-TJpQ(tOtbH#'RbNiqE$S<"jFk(BaB$<DHjm=L-^,S'R2[14[-#2?j\:gYmO6_,TcD%@]-1K
%))=d:`nTr%L9/LT>T\l.'iiI5V5rNPYQE.2pem64#Tl:1#T2NqjGY4J&iHl&?`Zj1>G<,R7c;EEQLf_/,>4SFC,BS-V)f-*J0IhT
%q)QRnHn"WJd&f(#fBa)?jEDt7$8uYq/g<$13!)o(;UukDChPWEQ$7W\&Eb4d9U,[u,AAU!#;=mWMW'ZtS&:uAJ48>(k8_`U>t_OO
%6f/E%8#HS.O?-g33Jicd3j?M@JDi(&=fQEF0TluGnJA(`Cu(D7@sVe(_-oTc<VN#6B0mmso4AIX"UN]+.OQ@2!"X\RN.B+a4GMPY
%JOC+jC2FkQO=;8VNVGbj"piYbI"5BDW#RB2n1/K8dteNr]E[@(N.=u"%GorX(]aXVI[79L"NH2Am#`.d0Qt_uSC#&T<bT:6([rRY
%=)c%bL`k)"(pa8Mh[q*+/<Pu]_[%".1I;7(Mu[QEqr<'ghS2S?GZ73WJRet^3'UZZ?bpD1_r-'<!lMM_%E#^,P@4Iq_16g!q^E'n
%of'al;@'GrW4@kI<C^<ZJgWsK*)`4"?>q+N+'VcjAHke5L.53V4.+O/NjIj1\>!G9&fN!)W'g;XHjF<KL*;ZT`+T/T0J:,)io/lr
%NbQE-Vj_=-*jl9ToaX4\acoa"kBK!.`N=NZ5SDuVO/M"pdeO7pm9J[TZ(><>MGY.riQ3Vqdq_e&8sP/]4s_8!Ci)3Me/jemaYmNZ
%2"^%uW1UA'C5$JVKFRQeA@[S-CWk<[=JPH9g&-AXK3g2?K;J2HoaiZW4(jI8OX'2DY_R6Ie>'$<TrWc@YB3AF<?,bj>ld)2EDhM,
%;-BXI%2`g:>eBH%4f8n9%`h,XA#R0%j!%+SD>.-ta5IF:>-o9pY_]221Pbi/$Z$0lo_;TV(:VVS/VeC@6CX"Q"fLmL)-jC13-NN)
%64.;K&K$**,6fNU-#qp+#"PIYY`GGt3&dp"_VfYN4SJ]D5qRHHhi>49c++Z0mWL!A2kJ,l\D)!H^1B+.iGJj@_8F(E$)[LrZbkN-
%XQAjS>e/V*^X'SX>4.,^lK+DD$af)6<_/M@G[$in0m'KK\7)Z/=khJe)?Xb:KKPBE3cOcmC)MAK<k`b4<#YVY^t6?ZhVWB/OQclP
%@<E./*E']I$TOm<!U/p\Ckc=Gg]SZp$%[Kn"QKt&e_&1p>od[DC"Q/E&DruA5)tue9X-cXTT9itSi`GkT5ENmXZ(4RC4pEVDY"-t
%i\YoIMs\CmV+&_u$Y`9iRluu[*)SP+d/7r8;j%d=*@JmE'm#UAP/'EGpVY)m7C"YiEEKfN0hOng\((-,6R3JT177Ajq!]D5.`"5f
%[/a^n:,)NB3b3(%kF_?e@`aTX\8J!o6.L"is#F/^\DccL9?<XN@A[6@1.?l\(QX0f*9\<LM3&.4Nt9lnp1DrC1Eau<lZX>mk_s$H
%BEI?e%((O<a)H@d5W6s%$Y!7cTeNi<:.K%Z_/Uh7eMBq^fOBSf%CFCJg4krV5SccOGT#o*nJ5?Pb7LhTE#nK>0Qc77@EQa9_oFiF
%L8%1Q?d$WS"VITX%55&59#=uSbODKpk]&1-Hb<@1<gG<jUP>%p8'f?kn'S,+QPF.F`/^6g;.8je@qN4OK]ngAYP$m$]p>)&#L`H'
%1ZN>bK[>:<#M?i9_p:DV*kjHbo<=s?R>8b*bZsnqE-&icbKU354Z?Fn2r%Z;d;X.Q>gLZ[`[s,N?>-kE#g`LLi,@N%q`?nPBZD;Z
%+1h@U5g#";'nh%!(!PN<m`>O^8O-a8Lq0o4ksm-D11Tg9\P(!N2ekTioB<6lVM>r!Y?Gh-.9I*sVRP>,3uQ`mprM7jLG7]EMGP(?
%QFK5elTEhZh+^_Kn>%;P0C[ELfJb1u@'nKM\m1e9n!>j!'sS"!45:3dRf*^YRYE=Pm22j"p-idW>0;u,p\s6E`0:+H[uItEPO7Yc
%.pH4BpE+h^Z&,aa)eo=p7iN:'#*R:<e=c2*i\Qs?aB_k%bN-mN5#lp'fnZN0.]5HS`0GSPT%H_s_1p-ub9Ubu!NmE%/mu$oi3loA
%^Kb,/+csTT:":m:'u7>&\qO?6EYp2,h81bL<BLuZDCH%)?+<>oL4g9s)I:/7_N1kgpVc(E9hBP39e[u<L'<Hl\r[qtaQKdi+7`Ic
%)hbjCpq.T,QnCPc,[(>dC;;ph*.gmBF?7+^c:,qt."=<=+:H[C^JLk.'pC#`qqV*U<;e_k@"6e4?s[H<TsudSZ!Z/ohC+14[8\#^
%]XeY?+Lng`KN)?3&!Z9%rn$-s,ASmb0g:[uLYUkn+)jG*=H*DH##L5=$>o<1->`47^2:mb8B[5L50@a]FGtGBRiM/V,gk9ODiaZ)
%W]WT@";"GG.m4`+OS$#&k+RLgjnL'.dVURgD+\CBLiC9T,uVJ4!4/Y?`E)pp^j(FJMj3/>E?d4bD(qfJR%%]=U(ru8[G\/%WZMRj
%?5=BWc-QCbNt*_iHc1'5U]Oq51l+]ukQnY[R=LB[EEp2;2$oFI""\kmXriA;.dbTACCVP.%(]miDgUDH>9-F/&r"h_nd(Z_?,S45
%1Z?Fs&Q!GHJKGQ0Jm1iMf^H2&pa\%i?*=B)+J^_&"DhKU!=/*Z5`<S!J2Vj.<M8]OHeF4*aN-aZHoDc%JbNXU%cE@t!o+uB6U8h$
%$)q)8ntKs]=DL8ibPC!SUWpl3lq5(us"+NrE2DMH8G2H/FiMhr+SZgr%p-436Qa+66C4u1'q2enF_rtdo^"#:Y9cE3?=8UT@!m(Y
%BSRcD#$4,QAVHDQk6"o'W'(\@r>!F7E+.`(Ec4<+o2*F%nT+'>[TpO`'Yj0u6roSu-G5\`Dh*[DSkRip)B@c"r)c:J/a1E1/nUXA
%`IVCqNequu*<#,28d4?(1f<dIj2'?Shn!od2pkRP-HnG>e1cK`P9_*0O&OM*42@#4MJPQ=)PJN<Yo,4/dXp?i9?94^[]Ol>"54d+
%StHP&@\:25gX&h)3caNCgC_pZPF26hZiih;[4r[b$`GFcJQ?MhmSdY@:PG5Q?It!TjGof?(/C6OSi2k;!_nrOQJ9]Z>b[u@T4"Mb
%:4/n97Coj:G,Y&?84lqhP`=m0em?J?.]#I3e3Hcu]V]q_^*T]=5.iSh#BD_eW9!j[d=,/m9HaD7;pnB*rn2`$,JN.KBL-FG'Q`4G
%/;K%L:*H)@4G2@dVo9,*EAFUalDhe";]NX3oeV0BKhc*!*:Y^2$ZVVX-XgS+js,QtrD>.Mrki\H0Sd;P#[A+Hb9,oa$=lj:)sZ%c
%j"8%d<_f?bLdhW0LMH7"c#G%dm]`"p!MVu*'_a>TYG4sU9HadchF94.2FJ0&_8_;cqD2>qM:2Qk0n7_UKTdD#gPDI`dP*Z/f/q\W
%4GX$'^7c!V=VU&Z['YtNDQk>pH>"H6UEp@)c!j`F)q&]#7,2bkC#G:EJQkbcWD^(N&SY.PY1Sk+Ye\^.Bi&I'6Kh"Y;&OgjEZg?/
%5GTEaVGg(X$cN"WV"rQ7>e*IV]5lZ?\c1^hb3$IJ&!rRfE-ug"j7\\Sc(2Q8_gh[Gj7gfJD9m$Iq1;bY&*QeF*tPiqs7goM4nJX$
%fDbjS5H6q-If0%p)uoiVrs-L?[<2~>
%AI9_PrivateDataEnd
